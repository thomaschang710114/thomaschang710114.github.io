{"version":3,"sources":["components/SvgGradientBanner/index.tsx","../node_modules/@material-ui/icons/Add.js","../node_modules/@material-ui/icons/Remove.js","pages/StakingPage/components/HarvestModal/index.tsx","pages/StakingPage/components/HarvestSection/index.tsx","pages/StakingPage/components/StakingItem/index.tsx","pages/StakingPage/components/DepositModal/index.tsx","pages/StakingPage/components/WithdrawModal/index.tsx","pages/StakingPage/components/StakingSection/index.tsx","pages/StakingPage/components/TokenStaking/index.tsx","utils/staking.ts","pages/StakingPage/components/StakingOverview/index.tsx","pages/StakingPage/components/LPLock/index.tsx","pages/StakingPage/index.tsx"],"names":["useStyles","makeStyles","theme","root","position","padding","content","fontWeight","minHeight","textAlign","background","colors","neutralLight","display","flexDirection","justifyContent","title","fontSize","color","neutralLighter","marginBottom","illustration","top","right","bottom","pointerEvents","height","main","description","marginTop","buttonContained","backgroundColor","primary","boxShadow","minWidth","boxSizing","lineHeight","borderRadius","letterSpacing","textTransform","neutralDark","cursor","margin","outline","alignItems","userSelect","verticalAlign","textDecoration","WebkitTapHighlightColor","border","SvgGradientBanner","props","btnTitle","typeformId","btnUrl","classes","className","width","viewBox","xmlns","cx","cy","fx","fy","r","id","stopColor","offset","stopOpacity","transform","fill","fillRule","fillOpacity","align","component","variant","href","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","fourth","spacing","left","maxHeight","overflowY","transparentize","label","buttons","marginLeft","flex","black","button","HarvestModal","onConfirm","onClose","Modal","disableBackdropClick","open","clsx","Typography","Button","onClick","flexGrow","flexBasis","earned","amount","collect","transparent","row","HarvestSection","token","onHarvest","useState","visible","setVisible","a","symbol","toUpperCase","numberWithCommas","formatBigNumber","decimals","disabled","isZero","maxWidth","header","borderBottomLeftRadius","borderBottomRightRadius","headerIcons","marginRight","headerIcon","headerLeft","headerComment","headerTitle","tvlWrapper","paddingBottom","tvlToken","tvlValue","aprWrapper","borderLeft","infoWrapper","infoLabel","infoValue","loader","contentWrapper","paddingTop","StakingItem","loading","useCommonStyles","icons","map","icon","alt","src","CircularProgress","size","totalStaked","tvl","ETHER_DECIMAL","apr","rewardSymbol","children","comment","error","balanceRow","rowLabel","rowValue","DepositModal","lockPeriod","emgergencyWithdrawFee","ZERO","state","setState","balance","useTokenBalance","address","lockDays","Math","floor","onChange","prev","onMax","max","emergencyWithdraw","helper","WithdrawModal","onWithdraw","onEmergencyWithdraw","lastClaim","timestampRemaining","Date","now","isUnlocked","unlockTimeStr","sec","mins","min","hours","hour","days","fullWidth","actions","action","borderColor","StakingSection","useConnectedWeb3Context","account","setWalletConnectModalOpened","depositedAmount","onDeposit","onApprove","isApproved","depositVisible","setDepositVisible","withdrawVisible","setWithdrawVisible","isConnected","onConfirmDeposit","onConfirmWithdraw","onConfirmEmergencyWithdraw","IconButton","then","infoSection","flexShrink","breakpoints","up","infoRow","actionContainer","TokenStaking","data","provider","library","networkId","setTxModalInfo","getTokenFromAddress","useStakingPool","details","reload","tokenPrice","useTokenPrice","token0","etherScanUri","getEtherscanUri","enqueueSnackbar","useSnackbar","rewardToken","loaded","personalInfo","pendingRewards","mul","useEffect","updateTVL","stakingTokenPrice","rewardTokenPrice","tokenPerBlock","blocksPerYear","totalRewardPricePerYear","totalStakingTokenInPool","div","ONE_ETHER","aprStr","Number","getPoolApr","BigNumber","from","getBlocksPerYear","loadPersonalInfo","stakingService","StakingService","userInfo","pId","pendingAmount","toNumber","loadApprovedInfo","erc20","ERC20Service","allowance","gt","getGasPrice","gasPrice","estimatedGas","claimEstimateGas","claim","calculateGasMargin","txHash","waitForTransaction","console","warn","message","withdrawEstimateGas","withdraw","emergencyWithdrawEstimateGas","hasEnoughAllowance","approveUnlimited","depositEstimateGas","deposit","name","image","link","buyLink","lockupDuration","emergencyWithdrawFee","StakingOverview","playToken","getToken","Box","StakingPage","stakings","getTokenStakings","total","values","forEach","element","add","p","Grid","container","item","xs","sm","md"],"mappings":"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","file":"static/js/13.7727efc4.chunk.js","sourcesContent":["import { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { PopupButton } from \"@typeform/embed-react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n    padding: \"24px 0\",\n  },\n  content: {\n    padding: 32,\n    fontWeight: 600,\n    minHeight: 200,\n    textAlign: \"center\",\n    background: theme.colors.neutralLight,\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: \"2rem\",\n    color: theme.colors.neutralLighter,\n    fontWeight: 700,\n    marginBottom: 16,\n  },\n  illustration: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: \"none\",\n    \"& svg\": {\n      height: \"100%\",\n    },\n  },\n  main: {},\n  description: {\n    color: theme.colors.neutralLighter,\n    fontWeight: 600,\n    fontSize: 20,\n    marginTop: 12,\n  },\n  buttonContained: {\n    backgroundColor: theme.colors.primary,\n    boxShadow: \"0 0 1px 0 rgb(0 0 0 / 31%), 0 2px 2px -2px rgb(0 0 0 / 25%)\",\n    padding: \"6px 16px\",\n    fontSize: \"0.875rem\",\n    minWidth: \"64px\",\n    boxSizing: \"border-box\",\n    fontWeight: 500,\n    lineHeight: 1.75,\n    borderRadius: \"4px\",\n    letterSpacing: \"0.02857em\",\n    textTransform: \"none\",\n    color: theme.colors.neutralDark,\n    cursor: \"pointer\",\n    margin: \"0\",\n    display: \"inline-flex\",\n    outline: \"0\",\n    position: \"relative\",\n    alignItems: \"center\",\n    userSelect: \"none\",\n    verticalAlign: \"middle\",\n    textDecoration: \"none\",\n    WebkitTapHighlightColor: \"transparent\",\n    border: \"none\",\n    \"&:hover\": {\n      backgroundColor: theme.colors.primary,\n    },\n  },\n}));\ninterface IProps {\n  title: string;\n  description?: string;\n  btnTitle: string;\n  typeformId?: string;\n  btnUrl?: string;\n}\nexport const SvgGradientBanner = (props: IProps) => {\n  const { title, description, btnTitle, typeformId, btnUrl } = props;\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.content}>\n        <div className={classes.illustration}>\n          <svg\n            width=\"400\"\n            height=\"232\"\n            viewBox=\"0 0 400 232\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <defs>\n              <radialGradient\n                cx=\"50%\"\n                cy=\"50%\"\n                fx=\"50%\"\n                fy=\"50%\"\n                r=\"39.386%\"\n                id=\"box-gr-a\"\n              >\n                <stop stopColor=\"rgba(252,218,0,0.5)\" offset=\"0%\" />\n                <stop\n                  stopColor=\"rgba(252,218,0,0.5)\"\n                  stopOpacity=\"0\"\n                  offset=\"100%\"\n                />\n              </radialGradient>\n              <radialGradient\n                cx=\"50%\"\n                cy=\"50%\"\n                fx=\"50%\"\n                fy=\"50%\"\n                r=\"39.386%\"\n                id=\"box-gr-b\"\n              >\n                <stop stopColor=\"rgba(252,218,0,1)\" offset=\"0%\" />\n                <stop\n                  stopColor=\"rgba(252,218,0,1)\"\n                  stopOpacity=\"0\"\n                  offset=\"100%\"\n                />\n              </radialGradient>\n            </defs>\n            <g transform=\"translate(-85 -369)\" fill=\"none\" fillRule=\"evenodd\">\n              <circle\n                fillOpacity=\".16\"\n                fill=\"url(#box-gr-a)\"\n                cx=\"413\"\n                cy=\"688\"\n                r=\"240\"\n              />\n              <circle\n                fillOpacity=\".24\"\n                fill=\"url(#box-gr-b)\"\n                cx=\"400\"\n                cy=\"400\"\n                r=\"400\"\n              />\n            </g>\n          </svg>\n        </div>\n        <div className={classes.main}>\n          <Typography align=\"center\" component=\"h3\" className={classes.title}>\n            {title}\n          </Typography>\n          {description && (\n            <Typography className={classes.description}>\n              {description}\n            </Typography>\n          )}\n          {typeformId ? (\n            <PopupButton id=\"r5JLNVlb\" className={classes.buttonContained}>\n              {btnTitle}\n            </PopupButton>\n          ) : (\n            <Button color=\"primary\" variant=\"contained\" href={btnUrl}>\n              {btnTitle}\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');\n\nexports.default = _default;","import {\n  CircularProgress,\n  Modal,\n  Typography,\n  makeStyles,\n  Button,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { DEFAULT_NETWORK_ID } from \"config/constants\";\nimport { getEtherscanUri } from \"config/networks\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { transparentize } from \"polished\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    width: 380,\n    backgroundColor: theme.colors.fourth,\n    padding: theme.spacing(4),\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    maxHeight: \"80vh\",\n    userSelect: \"none\",\n    overflowY: \"auto\",\n\n    textAlign: \"center\",\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n  },\n  label: {\n    fontSize: 18,\n    color: theme.colors.neutralLighter,\n    marginBottom: 24,\n    fontWeight: 600,\n  },\n  buttons: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"&>*+*\": { marginLeft: 4 },\n    \"&>*\": {\n      flex: 1,\n      \"& span\": {\n        color: theme.colors.black,\n        fontWeight: 600,\n      },\n    },\n  },\n  button: {},\n}));\n\ninterface IProps {\n  onClose: () => void;\n  onConfirm: () => void;\n}\n\nexport const HarvestModal = (props: IProps) => {\n  const classes = useStyles();\n  const { onConfirm, onClose } = props;\n\n  return (\n    <Modal disableBackdropClick onClose={onClose} open>\n      <div className={clsx(classes.root)}>\n        <Typography className={classes.label}>\n          Your Lock Period will be reset again!\n        </Typography>\n        <div className={classes.buttons}>\n          {\" \"}\n          <Button color=\"primary\" onClick={onConfirm} variant=\"contained\">\n            Confirm\n          </Button>\n          <Button color=\"secondary\" onClick={onClose} variant=\"contained\">\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n","import { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { BigNumber } from \"ethers\";\nimport { transparentize } from \"polished\";\nimport { useState } from \"react\";\nimport { IToken } from \"types\";\nimport { formatBigNumber, numberWithCommas } from \"utils\";\nimport { HarvestModal } from \"../HarvestModal\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    flexBasis: 0,\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n\n    padding: 12,\n  },\n  earned: {\n    color: transparentize(0.2, theme.colors.neutralLighter),\n    fontSize: 14,\n    marginBottom: 8,\n  },\n  amount: { color: theme.colors.neutralLighter, fontSize: 20, fontWeight: 600 },\n  collect: {\n    backgroundColor: theme.colors.transparent,\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n\n    \"& span\": {\n      color: theme.colors.primary,\n      fontWeight: 600,\n    },\n    \"&:disabled\": {\n      backgroundColor: transparentize(0.6, theme.colors.black),\n      border: `1px solid ${transparentize(0.7, theme.colors.neutralLighter)}`,\n      \"& span\": {\n        color: transparentize(0.7, theme.colors.neutralLighter),\n        fontWeight: 600,\n      },\n    },\n  },\n  row: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n}));\n\ninterface IProps {\n  earned: BigNumber;\n  token: IToken;\n  onHarvest: () => Promise<void>;\n}\n\nexport const HarvestSection = (props: IProps) => {\n  const classes = useStyles();\n  const { token, earned, onHarvest } = props;\n\n  const [visible, setVisible] = useState(false);\n\n  const onConfirm = async () => {\n    await onHarvest();\n    setVisible(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      {visible && (\n        <HarvestModal\n          onClose={() => setVisible(() => false)}\n          onConfirm={onConfirm}\n        />\n      )}\n      <Typography className={classes.earned}>\n        <b>{token.symbol.toUpperCase()}</b> EARNED\n      </Typography>\n      <div className={classes.row}>\n        <Typography className={classes.amount}>\n          {numberWithCommas(formatBigNumber(earned, token.decimals))}\n        </Typography>\n        <Button\n          color=\"primary\"\n          className={classes.collect}\n          disabled={earned.isZero()}\n          onClick={() => setVisible(() => true)}\n          variant=\"contained\"\n        >\n          Collect\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { transparentize } from \"polished\";\nimport useCommonStyles from \"style/common\";\nimport { BigNumber } from \"ethers\";\nimport { formatBigNumber, numberWithCommas } from \"utils\";\nimport { ETHER_DECIMAL } from \"config/constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 400,\n    margin: \"auto\",\n    padding: \"20px 28px\",\n    backgroundColor: theme.colors.neutralLight,\n  },\n  header: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: 16,\n    \"&.expanded\": {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n  },\n  headerIcons: { marginRight: 8 },\n  headerIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: \"50%\",\n    position: \"relative\",\n    \"&:not(:first-child)\": {\n      left: -12,\n      width: 24,\n      height: 24,\n    },\n  },\n  headerLeft: { display: \"flex\", alignItems: \"center\" },\n  headerComment: {\n    color: transparentize(0.4, theme.colors.neutralLighter),\n    fontSize: 12,\n  },\n  headerTitle: {\n    marginTop: 0,\n    fontSize: 18,\n    fontWeight: 600,\n    color: theme.colors.neutralLighter,\n    maxWidth: 180,\n  },\n  tvlWrapper: {\n    textAlign: \"center\",\n    paddingBottom: 12,\n  },\n  tvlToken: {\n    fontWeight: 600,\n    color: theme.colors.neutralLighter,\n    fontSize: 18,\n    \"& span\": {\n      color: theme.colors.primary,\n    },\n  },\n  tvlValue: {\n    fontWeight: 600,\n    color: transparentize(0.4, theme.colors.neutralLighter),\n  },\n  aprWrapper: {\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n\n    padding: 20,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    \"& > div\": {\n      flex: 1,\n      textAlign: \"center\",\n    },\n    \"& > div + div\": {\n      borderLeft: `1px solid ${transparentize(\n        0.9,\n        theme.colors.neutralLighter\n      )}`,\n    },\n  },\n  infoWrapper: { textAlign: \"center\" },\n  infoLabel: {\n    fontSize: 12,\n    color: theme.colors.neutralLighter,\n  },\n  infoValue: {\n    fontSize: 20,\n    fontWeight: 600,\n    color: theme.colors.neutralLighter,\n  },\n\n  loader: { color: theme.colors.neutralLighter },\n  contentWrapper: {\n    paddingTop: 4,\n  },\n  content: {},\n}));\n\ninterface IProps {\n  loading: boolean;\n  header: {\n    icons: string[];\n    label: string;\n    apr: number;\n    totalStaked: BigNumber;\n    symbol: string;\n    decimals: number;\n    tvl: BigNumber;\n    rewardSymbol: string;\n  };\n}\n\nexport const StakingItem: React.SFC<IProps> = (props) => {\n  const classes = useStyles();\n  const commonClasses = useCommonStyles();\n  const { loading, header } = props;\n\n  return (\n    <div className={clsx(classes.root)}>\n      <div className={clsx(classes.header)}>\n        <div className={classes.headerLeft}>\n          <div className={classes.headerIcons}>\n            {header.icons.map((icon) => (\n              <img\n                alt=\"icon\"\n                className={classes.headerIcon}\n                key={icon}\n                src={icon}\n              />\n            ))}\n          </div>\n          <div>\n            <Typography className={classes.headerComment}>Stake:</Typography>\n            <Typography className={classes.headerTitle}>\n              {header.label}\n            </Typography>\n          </div>\n        </div>\n      </div>\n      <div>\n        <div className={classes.tvlWrapper}>\n          {loading ? (\n            <CircularProgress classes={{ root: classes.loader }} size={16} />\n          ) : (\n            <>\n              <Typography className={classes.tvlToken}>\n                {numberWithCommas(\n                  formatBigNumber(header.totalStaked, header.decimals, 0)\n                )}{\" \"}\n                <span>{header.symbol}</span>\n              </Typography>\n              <Typography className={classes.tvlValue}>\n                {header.tvl.isZero() ? (\n                  \"-\"\n                ) : (\n                  <>\n                    $&nbsp;\n                    {numberWithCommas(\n                      formatBigNumber(\n                        header.tvl,\n                        header.decimals + ETHER_DECIMAL,\n                        0\n                      )\n                    )}\n                  </>\n                )}\n              </Typography>\n            </>\n          )}\n        </div>\n\n        <div className={classes.aprWrapper}>\n          <div>\n            <Typography className={classes.infoValue}>\n              {header.apr > 0 ? `${header.apr}%` : \"-\"}\n            </Typography>\n            <Typography className={classes.infoLabel}>APR</Typography>\n          </div>\n          <div>\n            <Typography className={classes.infoValue}>\n              {header.rewardSymbol}\n            </Typography>\n            <Typography className={classes.infoLabel}>EARN</Typography>\n          </div>\n        </div>\n      </div>\n      <div className={clsx(classes.contentWrapper)}>\n        <div className={classes.content}>{props.children}</div>\n      </div>\n    </div>\n  );\n};\n","import { Modal, Typography, makeStyles, Button } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { BigNumber } from \"ethers\";\nimport { useTokenBalance } from \"helpers\";\nimport { transparentize } from \"polished\";\nimport React, { useState } from \"react\";\nimport { IToken } from \"types\";\nimport { ZERO } from \"utils/number\";\nimport { formatBigNumber, numberWithCommas } from \"utils\";\nimport { BigNumberInput } from \"components\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    width: 380,\n    backgroundColor: theme.colors.fourth,\n    padding: theme.spacing(4),\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    maxHeight: \"80vh\",\n    userSelect: \"none\",\n    overflowY: \"auto\",\n\n    textAlign: \"center\",\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n  },\n  label: {\n    fontSize: 18,\n    color: theme.colors.neutralLighter,\n    marginBottom: 24,\n    fontWeight: 600,\n  },\n  comment: {\n    fontSize: 16,\n    color: theme.colors.error,\n    marginBottom: 24,\n  },\n  balanceRow: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    marginBottom: 16,\n  },\n  rowLabel: {\n    fontSize: 16,\n    color: theme.colors.neutralLighter,\n  },\n  rowValue: {\n    fontSize: 18,\n    color: theme.colors.primary,\n    fontWeight: 600,\n  },\n  buttons: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"&>*+*\": { marginLeft: 4 },\n    \"&>*\": {\n      flex: 1,\n      \"& span\": {\n        color: theme.colors.black,\n        fontWeight: 600,\n      },\n    },\n  },\n  button: {\n    \"&:disabled\": {\n      backgroundColor: transparentize(0.8, theme.colors.neutralLighter),\n    },\n  },\n}));\n\ninterface IProps {\n  onClose: () => void;\n  onConfirm: (_: BigNumber) => void;\n  token: IToken;\n  max: BigNumber;\n  lockPeriod: number;\n  emgergencyWithdrawFee: number;\n}\n\ninterface IState {\n  amount: BigNumber;\n}\n\nexport const DepositModal = (props: IProps) => {\n  const classes = useStyles();\n  const { onConfirm, onClose, token, lockPeriod, emgergencyWithdrawFee } =\n    props;\n  const [state, setState] = useState<IState>({ amount: ZERO });\n  const { balance } = useTokenBalance(token.address);\n\n  const lockDays = Math.floor(lockPeriod / 60 / 60 / 24);\n\n  return (\n    <Modal disableBackdropClick onClose={onClose} open>\n      <div className={clsx(classes.root)}>\n        <Typography className={classes.label}>\n          Deposit {token.symbol.toUpperCase()}\n        </Typography>\n        <Typography align=\"left\" className={classes.comment}>\n          It will be locked for {lockDays} days.\n          <br />\n          EmergencyWithdraw will charge {emgergencyWithdrawFee}% fee and no\n          rewards.\n        </Typography>\n        <BigNumberInput\n          token={token}\n          value={state.amount}\n          onChange={(amount) => setState((prev) => ({ ...prev, amount }))}\n          onMax={() => {\n            setState((prev) => ({ ...prev, amount: props.max }));\n          }}\n        />\n        <div className={classes.balanceRow}>\n          <Typography className={classes.rowLabel}>Balance:&nbsp;</Typography>\n          <Typography className={classes.rowValue}>\n            {numberWithCommas(formatBigNumber(balance, token.decimals))}{\" \"}\n            {token.symbol.toUpperCase()}\n          </Typography>\n        </div>\n\n        <div className={classes.buttons}>\n          <Button\n            className={classes.button}\n            color=\"primary\"\n            onClick={() => onConfirm(state.amount)}\n            variant=\"contained\"\n            disabled={state.amount.isZero()}\n          >\n            Deposit\n          </Button>\n          <Button color=\"secondary\" onClick={onClose} variant=\"contained\">\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n","import { Modal, Typography, makeStyles, Button } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { BigNumber } from \"ethers\";\nimport { useTokenBalance } from \"helpers\";\nimport { transparentize } from \"polished\";\nimport React, { useState } from \"react\";\nimport { IToken } from \"types\";\nimport { ZERO } from \"utils/number\";\nimport { formatBigNumber, numberWithCommas } from \"utils\";\nimport { BigNumberInput } from \"components\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    width: 380,\n    backgroundColor: theme.colors.fourth,\n    padding: theme.spacing(4),\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    maxHeight: \"80vh\",\n    userSelect: \"none\",\n    overflowY: \"auto\",\n\n    textAlign: \"center\",\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n  },\n  label: {\n    fontSize: 18,\n    color: theme.colors.neutralLighter,\n    marginBottom: 24,\n    fontWeight: 600,\n  },\n  balanceRow: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    marginBottom: 16,\n  },\n  rowLabel: {\n    fontSize: 16,\n    color: theme.colors.neutralLighter,\n  },\n  rowValue: {\n    fontSize: 18,\n    color: theme.colors.primary,\n    fontWeight: 600,\n  },\n  buttons: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"&>*+*\": { marginLeft: 4 },\n    \"&>*\": {\n      flex: 1,\n      \"& span\": {\n        color: theme.colors.black,\n        fontWeight: 600,\n      },\n    },\n  },\n  button: {\n    \"&:disabled\": {\n      backgroundColor: transparentize(0.8, theme.colors.neutralLighter),\n    },\n  },\n  emergencyWithdraw: {\n    marginTop: 4,\n    \"& span\": {\n      color: theme.colors.black,\n      fontWeight: 600,\n    },\n  },\n  helper: {\n    color: transparentize(0.4, theme.colors.neutralLighter),\n    fontSize: 14,\n    marginTop: 4,\n    \"&.warn\": {\n      color: theme.colors.error,\n    },\n  },\n}));\n\ninterface IProps {\n  onClose: () => void;\n  onWithdraw: (_: BigNumber) => void;\n  onEmergencyWithdraw: (_: BigNumber) => void;\n  token: IToken;\n  max: BigNumber;\n  lastClaim: number;\n  lockPeriod: number;\n  emgergencyWithdrawFee: number;\n}\n\ninterface IState {\n  amount: BigNumber;\n}\n\nexport const WithdrawModal = (props: IProps) => {\n  const classes = useStyles();\n  const {\n    onWithdraw,\n    onClose,\n    token,\n    onEmergencyWithdraw,\n    emgergencyWithdrawFee,\n    lastClaim,\n    lockPeriod,\n  } = props;\n  const [state, setState] = useState<IState>({ amount: ZERO });\n\n  const timestampRemaining =\n    lastClaim + lockPeriod - Math.floor(Date.now() / 1000);\n  const isUnlocked = timestampRemaining <= 0 ? true : false;\n\n  const unlockTimeStr = (() => {\n    if (isUnlocked) return \"\";\n    const sec = timestampRemaining % 60;\n    const mins = Math.floor(timestampRemaining / 60);\n    const min = mins % 60;\n    const hours = Math.floor(mins / 60);\n    const hour = hours % 24;\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) return `${days} day${days > 0 ? \"s\" : \"\"}`;\n    if (hour > 0) return `${hour} hour${hour > 0 ? \"s\" : \"\"}`;\n    if (min > 0) return `${min} min${min > 0 ? \"s\" : \"\"}`;\n\n    return `${sec} sec${sec > 0 ? \"s\" : \"\"}`;\n  })();\n\n  return (\n    <Modal disableBackdropClick onClose={onClose} open>\n      <div className={clsx(classes.root)}>\n        <Typography className={classes.label}>\n          Withdraw {token.symbol.toUpperCase()}\n        </Typography>\n        <Typography className={classes.helper}>\n          {isUnlocked\n            ? \"You can withdraw now\"\n            : `You have ${unlockTimeStr} remaining lock period`}\n        </Typography>\n        <br />\n        <BigNumberInput\n          token={token}\n          value={state.amount}\n          onChange={(amount) => setState((prev) => ({ ...prev, amount }))}\n          onMax={() => {\n            setState((prev) => ({ ...prev, amount: props.max }));\n          }}\n        />\n        <div className={classes.balanceRow}>\n          <Typography className={classes.rowLabel}>Deposited:&nbsp;</Typography>\n          <Typography className={classes.rowValue}>\n            {numberWithCommas(formatBigNumber(props.max, token.decimals))}{\" \"}\n            {token.symbol.toUpperCase()}\n          </Typography>\n        </div>\n\n        <div className={classes.buttons}>\n          <Button\n            className={classes.button}\n            color=\"primary\"\n            onClick={() => onWithdraw(state.amount)}\n            variant=\"contained\"\n            disabled={state.amount.isZero() || !isUnlocked}\n          >\n            Withdraw\n          </Button>\n          <Button color=\"secondary\" onClick={onClose} variant=\"contained\">\n            Cancel\n          </Button>\n        </div>\n        <Button\n          className={clsx(classes.button, classes.emergencyWithdraw)}\n          color=\"primary\"\n          fullWidth\n          onClick={() => onEmergencyWithdraw(state.amount)}\n          variant=\"contained\"\n          disabled={state.amount.isZero()}\n        >\n          Emergency Withdraw\n        </Button>\n        <Typography className={clsx(classes.helper, \"warn\")}>\n          You can do emergencyWithdraw with {emgergencyWithdrawFee}% fee and no\n          rewards\n        </Typography>\n      </div>\n    </Modal>\n  );\n};\n","import { Button, IconButton, makeStyles, Typography } from \"@material-ui/core\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { BigNumber } from \"ethers\";\nimport { transparentize } from \"polished\";\nimport { useState } from \"react\";\nimport { IToken } from \"types\";\nimport { formatBigNumber, numberWithCommas } from \"utils\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { useTokenBalance } from \"helpers\";\nimport { DepositModal } from \"../DepositModal\";\nimport { WithdrawModal } from \"../WithdrawModal\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    flexBasis: 0,\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n\n    padding: 12,\n  },\n  label: {\n    color: transparentize(0.2, theme.colors.neutralLighter),\n    fontSize: 14,\n    marginBottom: 8,\n  },\n  amount: {\n    color: theme.colors.neutralLighter,\n    fontSize: 20,\n    fontWeight: 600,\n    flex: 1,\n  },\n  actions: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  action: {\n    color: theme.colors.neutralLighter,\n    padding: 12,\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n\n    \"&:disabled\": {\n      color: transparentize(0.7, theme.colors.neutralLighter),\n      borderColor: transparentize(0.8, theme.colors.neutralLighter),\n    },\n  },\n  button: {\n    \"& span\": {\n      color: theme.colors.black,\n      fontWeight: 600,\n    },\n  },\n  row: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n}));\n\ninterface IProps {\n  depositedAmount: BigNumber;\n  token: IToken;\n  isApproved: boolean;\n  onDeposit: (_: BigNumber) => Promise<void>;\n  onWithdraw: (_: BigNumber) => Promise<void>;\n  onEmergencyWithdraw: (_: BigNumber) => Promise<void>;\n  onApprove: () => Promise<void>;\n  lastClaim: number;\n  lockPeriod: number;\n  emgergencyWithdrawFee: number;\n}\n\nexport const StakingSection = (props: IProps) => {\n  const classes = useStyles();\n  const { account, setWalletConnectModalOpened } = useConnectedWeb3Context();\n  const {\n    token,\n    depositedAmount,\n    onDeposit,\n    onWithdraw,\n    onApprove,\n    isApproved,\n    onEmergencyWithdraw,\n    lastClaim,\n    lockPeriod,\n    emgergencyWithdrawFee,\n  } = props;\n\n  const [depositVisible, setDepositVisible] = useState(false);\n  const [withdrawVisible, setWithdrawVisible] = useState(false);\n\n  const isConnected = !!account;\n\n  const onConfirmDeposit = async (amount: BigNumber) => {\n    await onDeposit(amount);\n    setDepositVisible(false);\n  };\n  const onConfirmWithdraw = async (amount: BigNumber) => {\n    await onWithdraw(amount);\n    setWithdrawVisible(false);\n  };\n  const onConfirmEmergencyWithdraw = async (amount: BigNumber) => {\n    await onEmergencyWithdraw(amount);\n    setWithdrawVisible(false);\n  };\n  const { balance } = useTokenBalance(token.address);\n\n  return (\n    <div className={classes.root}>\n      {depositVisible && (\n        <DepositModal\n          onClose={() => setDepositVisible(() => false)}\n          token={token}\n          onConfirm={onConfirmDeposit}\n          max={balance}\n          lockPeriod={lockPeriod}\n          emgergencyWithdrawFee={emgergencyWithdrawFee}\n        />\n      )}\n      {withdrawVisible && (\n        <WithdrawModal\n          onClose={() => setWithdrawVisible(() => false)}\n          token={token}\n          onWithdraw={onConfirmWithdraw}\n          onEmergencyWithdraw={onConfirmEmergencyWithdraw}\n          max={props.depositedAmount}\n          lastClaim={lastClaim}\n          lockPeriod={lockPeriod}\n          emgergencyWithdrawFee={emgergencyWithdrawFee}\n        />\n      )}\n      <Typography className={classes.label}>\n        {!isConnected || !isApproved ? (\n          \"Start Staking\"\n        ) : (\n          <>\n            Staked <b>{token.symbol.toUpperCase()}</b>\n          </>\n        )}\n      </Typography>\n      <div className={classes.row}>\n        {!isConnected || !isApproved ? (\n          <Button\n            color=\"primary\"\n            className={classes.button}\n            fullWidth\n            onClick={() => {\n              if (isConnected) {\n                onApprove().then();\n              } else {\n                setWalletConnectModalOpened(true);\n              }\n            }}\n            variant=\"contained\"\n          >\n            {isConnected ? \"contained\" : \"Connect Wallet\"}\n          </Button>\n        ) : (\n          <>\n            <Typography className={classes.amount}>\n              {numberWithCommas(\n                formatBigNumber(depositedAmount, token.decimals)\n              )}\n            </Typography>\n            <div className={classes.actions}>\n              <IconButton\n                className={classes.action}\n                disabled={balance.isZero()}\n                onClick={() => setDepositVisible(() => true)}\n              >\n                <AddIcon />\n              </IconButton>\n              &nbsp;\n              <IconButton\n                className={classes.action}\n                disabled={depositedAmount.isZero()}\n                onClick={() => setWithdrawVisible(() => true)}\n              >\n                <RemoveIcon />\n              </IconButton>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { makeStyles } from \"@material-ui/core\";\nimport { InfoLinkRow } from \"components\";\nimport {\n  getBlocksPerYear,\n  getEtherscanUri,\n  getTokenFromAddress,\n} from \"config/networks\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { BigNumber } from \"ethers\";\nimport { useStakingPool, useTokenPrice } from \"helpers\";\nimport { useSnackbar } from \"notistack\";\nimport { useEffect, useState } from \"react\";\nimport { ERC20Service } from \"services/erc20\";\nimport { StakingService } from \"services/staking\";\nimport { ITokenStaking } from \"types\";\nimport { calculateGasMargin } from \"utils\";\nimport { ZERO } from \"utils/number\";\nimport { getPoolApr } from \"utils/staking\";\nimport { HarvestSection } from \"../HarvestSection\";\nimport { StakingItem } from \"../StakingItem\";\nimport { StakingSection } from \"../StakingSection\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  infoSection: {\n    flexGrow: 0,\n    flexShrink: 0,\n    flexBasis: \"auto\",\n    padding: 8,\n    [theme.breakpoints.up(\"md\")]: {\n      width: 230,\n    },\n  },\n  infoRow: {\n    \"& + &\": {\n      marginTop: 8,\n    },\n  },\n  actionContainer: {\n    \"& > * + *\": {\n      marginTop: 8,\n    },\n  },\n}));\n\ninterface IProps {\n  data: ITokenStaking;\n  updateTVL: (_: BigNumber) => void;\n}\n\ninterface IState {\n  loaded: boolean;\n  personalInfo: {\n    amount: BigNumber;\n    pendingRewards: BigNumber;\n    lastClaim: number;\n  };\n  isApproved: boolean;\n  apr: number | null;\n}\n\nexport const TokenStaking = (props: IProps) => {\n  const classes = useStyles();\n\n  const { data } = props;\n  const {\n    account,\n    library: provider,\n    networkId,\n    setTxModalInfo,\n  } = useConnectedWeb3Context();\n  const token = getTokenFromAddress(data.token, networkId);\n  const { loading, data: details, reload } = useStakingPool(data);\n  const { token0: tokenPrice } = useTokenPrice(data.token);\n\n  const etherScanUri = getEtherscanUri(networkId);\n  const { enqueueSnackbar } = useSnackbar();\n  const rewardToken = getTokenFromAddress(data.rewardToken, networkId);\n\n  const [state, setState] = useState<IState>({\n    loaded: false,\n    personalInfo: { amount: ZERO, pendingRewards: ZERO, lastClaim: 0 },\n    isApproved: false,\n    apr: null,\n  });\n\n  const tvl = details ? details.depositedAmount.mul(tokenPrice) : ZERO;\n\n  useEffect(() => {\n    if (details) {\n      props.updateTVL(tokenPrice.mul(details.depositedAmount));\n\n      // calculate apr\n      const apr = getPoolApr(\n        tokenPrice,\n        tokenPrice,\n        details.depositedAmount,\n        details.tokenPerBlock,\n        BigNumber.from(getBlocksPerYear(networkId))\n      );\n\n      setState((prev) => ({ ...prev, apr }));\n    }\n  }, [tokenPrice, details?.depositedAmount]);\n\n  const loadPersonalInfo = async () => {\n    if (!provider || !account) {\n      setState((prev) => ({\n        ...prev,\n        personalInfo: { amount: ZERO, pendingRewards: ZERO, lastClaim: 0 },\n      }));\n      return;\n    }\n    const stakingService = new StakingService(provider, account, data.address);\n    try {\n      const userInfo = await stakingService.userInfo(data.pId, account);\n      const pendingAmount = await stakingService.pendingRewards(\n        data.pId,\n        account\n      );\n      setState((prev) => ({\n        ...prev,\n        personalInfo: {\n          amount: userInfo[0],\n          pendingRewards: pendingAmount,\n          lastClaim: userInfo[3].toNumber(),\n        },\n      }));\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        personalInfo: { amount: ZERO, pendingRewards: ZERO, lastClaim: 0 },\n      }));\n    }\n  };\n\n  const loadApprovedInfo = async () => {\n    if (!provider || !account) {\n      setState((prev) => ({ ...prev, isApproved: false }));\n      return;\n    }\n    const erc20 = new ERC20Service(provider, account, token.address);\n    const allowance = await erc20.allowance(account, data.address);\n    setState((prev) => ({ ...prev, isApproved: allowance.gt(ZERO) }));\n  };\n\n  const onHarvest = async () => {\n    if (!provider || !account) {\n      return;\n    }\n    try {\n      setTxModalInfo(true, \"Claiming...\");\n      const gasPrice = await provider.getGasPrice();\n\n      const stakingService = new StakingService(\n        provider,\n        account,\n        data.address\n      );\n\n      let estimatedGas = BigNumber.from(\"280058\");\n      try {\n        estimatedGas = await stakingService.claimEstimateGas(data.pId);\n      } catch (error) {}\n\n      const txHash = await stakingService.claim(\n        data.pId,\n        gasPrice,\n        calculateGasMargin(estimatedGas)\n      );\n      setTxModalInfo(true, \"Claiming...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadPersonalInfo();\n      setTxModalInfo(false);\n    } catch (error) {\n      console.warn(error);\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  const onWithdraw = async (amount: BigNumber) => {\n    if (!provider || !account) {\n      return;\n    }\n    try {\n      const gasPrice = await provider.getGasPrice();\n\n      setTxModalInfo(true, \"Withdraw...\");\n      const stakingService = new StakingService(\n        provider,\n        account,\n        data.address\n      );\n      let estimatedGas = BigNumber.from(\"240000\");\n      try {\n        estimatedGas = await stakingService.withdrawEstimateGas(\n          data.pId,\n          amount,\n          true\n        );\n      } catch (error) {}\n      const txHash = await stakingService.withdraw(\n        data.pId,\n        amount,\n        true,\n        gasPrice,\n        calculateGasMargin(estimatedGas)\n      );\n      setTxModalInfo(true, \"Withdraw...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadPersonalInfo();\n      await reload();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n  const onEmergencyWithdraw = async (amount: BigNumber) => {\n    if (!provider || !account) {\n      return;\n    }\n    try {\n      setTxModalInfo(true, \"EmergencyWithdraw...\");\n      const gasPrice = await provider.getGasPrice();\n\n      const stakingService = new StakingService(\n        provider,\n        account,\n        data.address\n      );\n      let estimatedGas = BigNumber.from(\"240000\");\n      try {\n        estimatedGas = await stakingService.emergencyWithdrawEstimateGas(\n          data.pId,\n          amount\n        );\n      } catch (error) {}\n\n      const txHash = await stakingService.emergencyWithdraw(\n        data.pId,\n        amount,\n        gasPrice,\n        calculateGasMargin(estimatedGas)\n      );\n      setTxModalInfo(true, \"EmergencyWithdraw...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadPersonalInfo();\n      await reload();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  const onDeposit = async (amount: BigNumber) => {\n    if (!provider || !account) {\n      return;\n    }\n    try {\n      const gasPrice = await provider.getGasPrice();\n      const erc20 = new ERC20Service(provider, account, token.address);\n      setTxModalInfo(true, \"Check allowance...\");\n      const hasEnoughAllowance = await erc20.hasEnoughAllowance(\n        account,\n        data.address,\n        amount\n      );\n\n      if (!hasEnoughAllowance) {\n        setTxModalInfo(true, \"Approving...\");\n        const txHash = await erc20.approveUnlimited(data.address);\n        setTxModalInfo(true, \"Approving...\", \"\", txHash);\n        await provider.waitForTransaction(txHash);\n      }\n      setTxModalInfo(true, \"Depositing...\");\n      const stakingService = new StakingService(\n        provider,\n        account,\n        data.address\n      );\n      let estimatedGas = BigNumber.from(\"240000\");\n      try {\n        estimatedGas = await stakingService.depositEstimateGas(\n          data.pId,\n          amount\n        );\n      } catch (error) {}\n\n      const txHash = await stakingService.deposit(\n        data.pId,\n        amount,\n        gasPrice,\n        calculateGasMargin(estimatedGas)\n      );\n      setTxModalInfo(true, \"Depositing...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadPersonalInfo();\n      await reload();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  const onApprove = async () => {\n    if (!provider || !account) {\n      return;\n    }\n    const erc20 = new ERC20Service(provider, account, token.address);\n    setTxModalInfo(true, \"Approving...\");\n    try {\n      const txHash = await erc20.approveUnlimited(data.address);\n      setTxModalInfo(true, \"Approving...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadApprovedInfo();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadPersonalInfo();\n    loadApprovedInfo();\n  }, [account, networkId, data.address]);\n\n  return (\n    <StakingItem\n      loading={loading && !details}\n      header={{\n        label: data.name,\n        apr: state.apr || 0,\n        icons: [token.image],\n        totalStaked: details ? details.depositedAmount : ZERO,\n        symbol: token.symbol.toUpperCase(),\n        decimals: token.decimals,\n        tvl,\n        rewardSymbol: rewardToken.symbol.toUpperCase(),\n      }}\n    >\n      <div className={classes.root}>\n        <div className={classes.infoSection}>\n          <InfoLinkRow\n            className={classes.infoRow}\n            label=\"Buy Token\"\n            link={data.buyLink}\n          />\n          <InfoLinkRow\n            className={classes.infoRow}\n            label=\"View Token\"\n            link={`${etherScanUri}address/${data.token}`}\n          />\n          <InfoLinkRow\n            className={classes.infoRow}\n            label=\"View Contract\"\n            link={`${etherScanUri}address/${data.address}`}\n          />\n        </div>\n        <div className={classes.actionContainer}>\n          <HarvestSection\n            earned={state.personalInfo.pendingRewards}\n            token={token}\n            onHarvest={onHarvest}\n          />\n          <StakingSection\n            isApproved={state.isApproved}\n            depositedAmount={state.personalInfo.amount}\n            token={token}\n            onDeposit={onDeposit}\n            onWithdraw={onWithdraw}\n            onApprove={onApprove}\n            onEmergencyWithdraw={onEmergencyWithdraw}\n            lastClaim={state.personalInfo.lastClaim}\n            lockPeriod={details ? details.lockupDuration.toNumber() : 0}\n            emgergencyWithdrawFee={\n              details ? details.emergencyWithdrawFee.toNumber() / 10 : 0\n            }\n          />\n        </div>\n      </div>\n    </StakingItem>\n  );\n};\n","import { ETHER_DECIMAL } from \"config/constants\";\nimport { BigNumber } from \"ethers\";\nimport { formatBigNumber } from \"utils\";\nimport { ONE_ETHER } from \"./number\";\n\nexport const calculateFarmApr = (\n  rewardTokenPerBlock: BigNumber,\n  blocksPerYear: BigNumber,\n  poolWeight: BigNumber,\n  totalWeight: BigNumber,\n  sfePriceUsd: BigNumber,\n  poolLiquidityUsd: BigNumber\n): number | null => {\n  const yearlyCakeRewardAllocation = rewardTokenPerBlock\n    .mul(blocksPerYear)\n    .mul(poolWeight)\n    .div(totalWeight);\n\n  if (poolLiquidityUsd.isZero()) return null;\n\n  const apr = yearlyCakeRewardAllocation\n    .mul(BigNumber.from(100))\n    .mul(sfePriceUsd)\n    .div(poolLiquidityUsd);\n\n  const aprStr = formatBigNumber(apr, ETHER_DECIMAL);\n  try {\n    return Number(aprStr);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const getPoolApr = (\n  stakingTokenPrice: BigNumber,\n  rewardTokenPrice: BigNumber,\n  totalStaked: BigNumber,\n  tokenPerBlock: BigNumber,\n  blocksPerYear: BigNumber\n): number | null => {\n  const totalRewardPricePerYear = rewardTokenPrice\n    .mul(tokenPerBlock)\n    .mul(blocksPerYear);\n  const totalStakingTokenInPool = stakingTokenPrice\n    .mul(totalStaked)\n    .div(ONE_ETHER);\n\n  if (totalStakingTokenInPool.isZero()) return null;\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).mul(100);\n\n  const aprStr = formatBigNumber(apr, ETHER_DECIMAL);\n  try {\n    return Number(aprStr);\n  } catch (error) {\n    return null;\n  }\n};\n","import { makeStyles, Typography, Box } from \"@material-ui/core\";\nimport { ETHER_DECIMAL } from \"config/constants\";\nimport { getToken } from \"config/networks\";\nimport { BigNumber } from \"ethers\";\nimport { transparentize } from \"polished\";\nimport { formatBigNumber, numberWithCommas } from \"utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingBottom: 12,\n  },\n  label: {\n    fontSize: 18,\n    color: theme.colors.neutralLighter,\n    fontWeight: 600,\n  },\n  value: {\n    color: theme.colors.primary,\n    fontSize: 36,\n    fontWeight: 800,\n  },\n}));\n\ninterface IProps {\n  tvl: BigNumber;\n}\n\nexport const StakingOverview = (props: IProps) => {\n  const classes = useStyles();\n  const playToken = getToken(\"legio\");\n  return (\n    <div className={classes.root}>\n      <Box>\n        <Typography className={classes.label}>\n          Total Value Locked:&nbsp;\n        </Typography>\n      </Box>\n      <Box>\n        <Typography className={classes.value} component=\"h3\" variant=\"h1\">\n          $\n          {numberWithCommas(\n            formatBigNumber(props.tvl, playToken.decimals + ETHER_DECIMAL)\n          )}\n        </Typography>\n      </Box>\n    </div>\n  );\n};\n","import { makeStyles } from \"@material-ui/core\";\nimport { InfoLinkRow } from \"components\";\nimport {\n  getBlocksPerYear,\n  getEtherscanUri,\n  getTokenFromAddress,\n} from \"config/networks\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { BigNumber } from \"ethers\";\nimport { useLPMining, useLPTokenPrice } from \"helpers\";\nimport { useSnackbar } from \"notistack\";\nimport { useEffect, useState } from \"react\";\nimport { ERC20Service } from \"services/erc20\";\nimport { LpMiningService } from \"services/lpMining\";\nimport { ILPMining } from \"types\";\nimport { calculateGasMargin } from \"utils\";\nimport { ZERO } from \"utils/number\";\nimport { calculateFarmApr } from \"utils/staking\";\nimport { HarvestSection } from \"../HarvestSection\";\nimport { StakingItem } from \"../StakingItem\";\nimport { StakingSection } from \"../StakingSection\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  infoSection: {\n    flexGrow: 0,\n    flexShrink: 0,\n    flexBasis: \"auto\",\n    padding: 8,\n  },\n  infoRow: {\n    \"& + &\": {\n      marginTop: 8,\n    },\n  },\n  actionContainer: {\n    \"& > * + *\": {\n      marginTop: 8,\n    },\n  },\n}));\n\ninterface IProps {\n  data: ILPMining;\n  updateTVL: (_: BigNumber) => void;\n}\n\ninterface IState {\n  loaded: boolean;\n  personalInfo: {\n    amount: BigNumber;\n    pendingRewards: BigNumber;\n    lastClaim: number;\n  };\n  isApproved: boolean;\n  apr: number | null;\n}\n\nexport const LPLock = (props: IProps) => {\n  const classes = useStyles();\n  const { data } = props;\n  const {\n    account,\n    library: provider,\n    networkId,\n    setTxModalInfo,\n  } = useConnectedWeb3Context();\n  const token = getTokenFromAddress(data.lpToken, networkId);\n  const rewardToken = getTokenFromAddress(data.rewardToken, networkId);\n  const token0 = getTokenFromAddress(token.token0 || \"\", networkId);\n  const token1 = getTokenFromAddress(token.token1 || \"\", networkId);\n  const { loading, data: details, reload } = useLPMining(data);\n  const etherScanUri = getEtherscanUri(networkId);\n  const { enqueueSnackbar } = useSnackbar();\n  const {\n    lpPrice: lpTokenPrice,\n    token0: token0Price,\n    poolUsd: poolLiquidityUsd,\n  } = useLPTokenPrice(token.address);\n\n  const [state, setState] = useState<IState>({\n    loaded: false,\n    personalInfo: { amount: ZERO, pendingRewards: ZERO, lastClaim: 0 },\n    isApproved: false,\n    apr: null,\n  });\n\n  const tvl = details ? details.depositedAmount.mul(lpTokenPrice) : ZERO;\n\n  useEffect(() => {\n    if (details) {\n      props.updateTVL(lpTokenPrice.mul(details.depositedAmount));\n\n      const getApr = () => {\n        const apr = calculateFarmApr(\n          details.tokenPerBlock,\n          BigNumber.from(getBlocksPerYear(networkId)),\n          details.allocPoint,\n          details.allocPoint,\n          token0Price,\n          poolLiquidityUsd\n        );\n        setState((prev) => ({ ...prev, apr }));\n      };\n\n      getApr();\n    }\n  }, [lpTokenPrice, details?.depositedAmount]);\n\n  const loadPersonalInfo = async () => {\n    if (!provider || !account) {\n      setState((prev) => ({\n        ...prev,\n        personalInfo: { amount: ZERO, pendingRewards: ZERO, lastClaim: 0 },\n      }));\n      return;\n    }\n    const lpService = new LpMiningService(provider, account, data.address);\n    try {\n      const userInfo = await lpService.userInfo(data.pId, account);\n      const pendingAmount = await lpService.pendingRewards(data.pId, account);\n      setState((prev) => ({\n        ...prev,\n        personalInfo: {\n          amount: userInfo[0],\n          pendingRewards: pendingAmount,\n          lastClaim: userInfo[3].toNumber(),\n        },\n      }));\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        personalInfo: { amount: ZERO, pendingRewards: ZERO, lastClaim: 0 },\n      }));\n    }\n  };\n\n  const loadApprovedInfo = async () => {\n    if (!provider || !account) {\n      setState((prev) => ({ ...prev, isApproved: false }));\n      return;\n    }\n    const erc20 = new ERC20Service(provider, account, token.address);\n    const allowance = await erc20.allowance(account, data.address);\n    setState((prev) => ({ ...prev, isApproved: allowance.gt(ZERO) }));\n  };\n\n  const onHarvest = async () => {\n    if (!provider || !account) {\n      return;\n    }\n    try {\n      setTxModalInfo(true, \"Claiming...\");\n      const gasPrice = await provider.getGasPrice();\n\n      const lpService = new LpMiningService(provider, account, data.address);\n      const estimatedGasLimit = await lpService.claimEstimateGas(data.pId);\n\n      const txHash = await lpService.claim(\n        data.pId,\n        gasPrice,\n        calculateGasMargin(estimatedGasLimit)\n      );\n      setTxModalInfo(true, \"Claiming...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadPersonalInfo();\n      setTxModalInfo(false);\n    } catch (error) {\n      console.warn(error);\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  const onWithdraw = async (amount: BigNumber) => {\n    if (!provider || !account) {\n      return;\n    }\n    try {\n      setTxModalInfo(true, \"Withdraw...\");\n      const gasPrice = await provider.getGasPrice();\n\n      const lpService = new LpMiningService(provider, account, data.address);\n\n      const estimatedGasLimit = await lpService.withdrawEstimateGas(\n        data.pId,\n        amount,\n        true\n      );\n      const txHash = await lpService.withdraw(\n        data.pId,\n        amount,\n        true,\n        gasPrice,\n        calculateGasMargin(estimatedGasLimit)\n      );\n      setTxModalInfo(true, \"Withdraw...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadPersonalInfo();\n      await reload();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n  const onEmergencyWithdraw = async (amount: BigNumber) => {\n    if (!provider || !account) {\n      return;\n    }\n    try {\n      setTxModalInfo(true, \"EmergencyWithdraw...\");\n      const gasPrice = await provider.getGasPrice();\n\n      const lpService = new LpMiningService(provider, account, data.address);\n      const estimatedGasLimit = await lpService.emergencyWithdrawEstimateGas(\n        data.pId,\n        amount\n      );\n\n      const txHash = await lpService.emergencyWithdraw(\n        data.pId,\n        amount,\n        gasPrice,\n        calculateGasMargin(estimatedGasLimit)\n      );\n      setTxModalInfo(true, \"EmergencyWithdraw...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadPersonalInfo();\n      await reload();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  const onDeposit = async (amount: BigNumber) => {\n    if (!provider || !account) {\n      return;\n    }\n    try {\n      const erc20 = new ERC20Service(provider, account, token.address);\n      setTxModalInfo(true, \"Check allowance...\");\n      const hasEnoughAllowance = await erc20.hasEnoughAllowance(\n        account,\n        data.address,\n        amount\n      );\n\n      if (!hasEnoughAllowance) {\n        setTxModalInfo(true, \"Approving...\");\n        const txHash = await erc20.approveUnlimited(data.address);\n        setTxModalInfo(true, \"Approving...\", \"\", txHash);\n        await provider.waitForTransaction(txHash);\n      }\n      setTxModalInfo(true, \"Depositing...\");\n      const gasPrice = await provider.getGasPrice();\n\n      const lpService = new LpMiningService(provider, account, data.address);\n      const estimatedGasLimit = await lpService.depositEstimateGas(\n        data.pId,\n        amount,\n        true\n      );\n      const txHash = await lpService.deposit(\n        data.pId,\n        amount,\n        true,\n        gasPrice,\n        calculateGasMargin(estimatedGasLimit)\n      );\n      setTxModalInfo(true, \"Depositing...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadPersonalInfo();\n      await reload();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  const onApprove = async () => {\n    if (!provider || !account) {\n      return;\n    }\n    const erc20 = new ERC20Service(provider, account, token.address);\n    setTxModalInfo(true, \"Approving...\");\n    try {\n      const txHash = await erc20.approveUnlimited(data.address);\n      setTxModalInfo(true, \"Approving...\", \"\", txHash);\n      await provider.waitForTransaction(txHash);\n      setTxModalInfo(true, \"Reloading...\");\n      await loadApprovedInfo();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadPersonalInfo();\n    loadApprovedInfo();\n  }, [account, networkId, data.address]);\n\n  return (\n    <StakingItem\n      loading={loading && !details}\n      header={{\n        label: data.name,\n        apr: state.apr || 0,\n        icons: [token0.image, token1.image],\n        totalStaked: details ? details.depositedAmount : ZERO,\n        symbol: token.symbol.toUpperCase(),\n        decimals: token.decimals,\n        tvl,\n        rewardSymbol: rewardToken.symbol.toUpperCase(),\n      }}\n    >\n      <div className={classes.root}>\n        <div className={classes.infoSection}>\n          <InfoLinkRow\n            className={classes.infoRow}\n            label=\"Get LP Token\"\n            link={data.buyLink}\n          />\n          <InfoLinkRow\n            className={classes.infoRow}\n            label=\"View Token\"\n            link={`${etherScanUri}address/${data.lpToken}`}\n          />\n          <InfoLinkRow\n            className={classes.infoRow}\n            label=\"View Contract\"\n            link={`${etherScanUri}address/${data.address}`}\n          />\n        </div>\n        <div className={classes.actionContainer}>\n          <HarvestSection\n            earned={state.personalInfo.pendingRewards}\n            token={rewardToken}\n            onHarvest={onHarvest}\n          />\n          <StakingSection\n            isApproved={state.isApproved}\n            depositedAmount={state.personalInfo.amount}\n            token={token}\n            onDeposit={onDeposit}\n            onWithdraw={onWithdraw}\n            onApprove={onApprove}\n            onEmergencyWithdraw={onEmergencyWithdraw}\n            lastClaim={state.personalInfo.lastClaim}\n            lockPeriod={details ? details.lockupDuration.toNumber() : 0}\n            emgergencyWithdrawFee={\n              details ? details.emergencyWithdrawFee.toNumber() / 10 : 0\n            }\n          />\n        </div>\n      </div>\n    </StakingItem>\n  );\n};\n","import { Grid, makeStyles, Typography, Box } from '@material-ui/core';\nimport { PageWrapper } from 'components';\nimport { getTokenStakings } from 'config/networks';\nimport { useConnectedWeb3Context } from 'contexts';\nimport { BigNumber } from 'ethers';\nimport { useEffect, useState } from 'react';\nimport { ZERO } from 'utils/number';\nimport {\n  TokenStaking,\n  LPLock,\n  StakingOverview,\n  StakingHero,\n} from './components';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '&+&': {\n      marginTop: 24,\n    },\n  },\n  content: { margin: '16px 0', textAlign: 'left' },\n}));\ninterface IState {\n  tvl: { [key: string]: BigNumber };\n}\n\nconst StakingPage = () => {\n  const { networkId } = useConnectedWeb3Context();\n  const stakings = getTokenStakings(networkId);\n  // const lpMinings = getLPMinings(networkId);\n  const classes = useStyles();\n  const [state, setState] = useState<IState>({ tvl: {} });\n\n  useEffect(() => {\n    setState(() => ({ tvl: {} }));\n  }, [networkId]);\n\n  const tvl = (() => {\n    let total: BigNumber = ZERO;\n    Object.values(state.tvl).forEach((element) => {\n      total = total.add(element);\n    });\n    return total;\n  })();\n\n  return (\n    <PageWrapper>\n      <Typography align='center' component='h3' variant='h1'>\n        Staking\n      </Typography>\n      <StakingOverview tvl={tvl} />\n      <Box p={3}>\n        <div className={classes.root}>\n          <div className={classes.content}>\n            <Grid container spacing={2}>\n              {stakings.map((item) => (\n                <Grid item key={item.address} xs={12} sm={6} md={4}>\n                  <TokenStaking\n                    data={item}\n                    updateTVL={(tvl) => {\n                      setState((prev) => ({\n                        ...prev,\n                        tvl: { ...prev.tvl, [item.address]: tvl },\n                      }));\n                    }}\n                  />\n                </Grid>\n              ))}\n              {/* {lpMinings.map((item) => (\n                <Grid item key={item.address} xs={12} sm={6} md={4}>\n                  <LPLock\n                    data={item}\n                    updateTVL={(tvl) => {\n                      setState((prev) => ({\n                        ...prev,\n                        tvl: { ...prev.tvl, [item.address]: tvl },\n                      }));\n                    }}\n                  />\n                </Grid>\n              ))} */}\n            </Grid>\n          </div>\n        </div>\n      </Box>\n    </PageWrapper>\n  );\n};\n\nexport default StakingPage;\n"],"sourceRoot":""}