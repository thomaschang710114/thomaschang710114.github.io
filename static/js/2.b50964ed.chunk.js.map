{"version":3,"sources":["services/ido.ts","services/idov2.ts","services/idov3.ts","services/idoSec.ts"],"names":["IDOService","provider","signerAddress","addr","contract","this","signer","getSigner","ethers","Contract","idoAbi","connect","address","a","getMaxAllocation","getClaimableAmount","funders","funder","totalFunded","release","amount","buyWithBNB","value","transactionObject","console","log","hash","buy","estimateGas","claim","gasPrice","gasLimit","IDOv2Service","getFunderInfo","tierFunders","whitelistFunders","fcfsFunders","roundId","getRoundTotalAllocation","getCurrentRoundId","func","args","IDOv3Service","isTierWhitelisted","whitelistEnabled","IDOSecService"],"mappings":"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","file":"static/js/2.b50964ed.chunk.js","sourcesContent":["import { BigNumber, Contract, Wallet, ethers } from \"ethers\";\nimport { IFunder, Maybe } from \"types\";\nimport idoAbi from \"abis/ido.json\";\n\nclass IDOService {\n  provider: any;\n  contract: Contract;\n\n  constructor(provider: any, signerAddress: Maybe<string>, addr: string) {\n    this.provider = provider;\n    if (signerAddress) {\n      const signer: Wallet = provider.getSigner();\n      this.contract = new ethers.Contract(addr, idoAbi, provider).connect(\n        signer\n      );\n    } else {\n      this.contract = new ethers.Contract(addr, idoAbi, provider);\n    }\n  }\n\n  get address(): string {\n    return this.contract.address;\n  }\n\n  async getMaxAllocation(address: string) {\n    return this.contract.getMaxAllocation(address);\n  }\n\n  async getClaimableAmount(address: string) {\n    return this.contract.getClaimableAmount(address);\n  }\n\n  async getFunderInfo(address: string): Promise<IFunder> {\n    const funder = await this.contract.funders(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[2],\n    };\n  }\n\n  async buyWithBNB(amount: BigNumber) {\n    const transactionObject = await this.contract.buyWithBNB({ value: amount });\n    console.log(`buyWithBNB transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async buy(amount: BigNumber) {\n    const transactionObject = await this.contract.buy(amount);\n    console.log(`buy transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async claimEstimateGas() {\n    return this.contract.estimateGas.claim();\n  }\n\n  async claim(gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.claim({\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`Claim transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n}\n\nexport { IDOService };\n","import { BigNumber, Contract, Wallet, ethers } from \"ethers\";\nimport { IFunder, Maybe } from \"types\";\nimport idoAbi from \"abis/idov2.json\";\n\nclass IDOv2Service {\n  provider: any;\n  contract: Contract;\n\n  constructor(provider: any, signerAddress: Maybe<string>, addr: string) {\n    this.provider = provider;\n    if (signerAddress) {\n      const signer: Wallet = provider.getSigner();\n      this.contract = new ethers.Contract(addr, idoAbi, provider).connect(\n        signer\n      );\n    } else {\n      this.contract = new ethers.Contract(addr, idoAbi, provider);\n    }\n  }\n\n  get address(): string {\n    return this.contract.address;\n  }\n\n  async getMaxAllocation(address: string) {\n    return this.contract.getMaxAllocation(address);\n  }\n\n  async getClaimableAmount(address: string) {\n    return this.contract.getClaimableAmount(address);\n  }\n\n  async getFunderInfo(address: string): Promise<IFunder> {\n    const funder = await this.contract.getFunderInfo(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[2],\n    };\n  }\n\n  async tierFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.tierFunders(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[2],\n    };\n  }\n\n  async whitelistFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.whitelistFunders(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[2],\n    };\n  }\n\n  async fcfsFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.fcfsFunders(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[2],\n    };\n  }\n\n  async getRoundTotalAllocation(roundId: BigNumber) {\n    return this.contract.getRoundTotalAllocation(roundId);\n  }\n\n  async getCurrentRoundId() {\n    return this.contract.getCurrentRoundId();\n  }\n\n  async buyWithBNB(\n    amount: BigNumber,\n    gasPrice: BigNumber,\n    gasLimit: BigNumber\n  ) {\n    const transactionObject = await this.contract.buyWithBNB({\n      value: amount,\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`buyWithBNB transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async buy(amount: BigNumber, gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.buy(amount, {\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`buy transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async estimateGas(func: string, args: any[], value?: BigNumber) {\n    return this.contract.estimateGas[func](...args, { value: value || \"0x0\" });\n  }\n\n  async claim(gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.claim({\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`Claim transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n}\n\nexport { IDOv2Service };\n","import { BigNumber, Contract, Wallet, ethers } from \"ethers\";\nimport { IFunder, Maybe } from \"types\";\nimport idoAbi from \"abis/idov3.json\";\n\nclass IDOv3Service {\n  provider: any;\n  contract: Contract;\n\n  constructor(provider: any, signerAddress: Maybe<string>, addr: string) {\n    this.provider = provider;\n    if (signerAddress) {\n      const signer: Wallet = provider.getSigner();\n      this.contract = new ethers.Contract(addr, idoAbi, provider).connect(\n        signer\n      );\n    } else {\n      this.contract = new ethers.Contract(addr, idoAbi, provider);\n    }\n  }\n\n  get address(): string {\n    return this.contract.address;\n  }\n\n  async getMaxAllocation(address: string) {\n    return this.contract.getMaxAllocation(address);\n  }\n\n  async getClaimableAmount(address: string) {\n    return this.contract.getClaimableAmount(address);\n  }\n\n  async isTierWhitelisted(address: string) {\n    return this.contract.isTierWhitelisted(address);\n  }\n\n  async whitelistEnabled() {\n    return this.contract.whitelistEnabled();\n  }\n\n  async getFunderInfo(address: string): Promise<IFunder> {\n    const funder = await this.contract.getFunderInfo(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[1],\n    };\n  }\n\n  async tierFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.tierFunders(address);\n    return {\n      totalFunded: funder[0],\n\n      release: funder[1],\n    };\n  }\n\n  async whitelistFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.whitelistFunders(address);\n    return {\n      totalFunded: funder[0],\n\n      release: funder[1],\n    };\n  }\n\n  async fcfsFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.fcfsFunders(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[1],\n    };\n  }\n\n  async getRoundTotalAllocation(roundId: BigNumber) {\n    return this.contract.getRoundTotalAllocation(roundId);\n  }\n\n  async getCurrentRoundId() {\n    return this.contract.getCurrentRoundId();\n  }\n\n  async buyWithBNB(\n    amount: BigNumber,\n    gasPrice: BigNumber,\n    gasLimit: BigNumber\n  ) {\n    const transactionObject = await this.contract.buyWithBNB({\n      value: amount,\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`buyWithBNB transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async buy(amount: BigNumber, gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.buy(amount, {\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`buy transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async estimateGas(func: string, args: any[], value?: BigNumber) {\n    return this.contract.estimateGas[func](...args, { value: value || \"0x0\" });\n  }\n\n  async claim(gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.claim({\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`Claim transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n}\n\nexport { IDOv3Service };\n","import { BigNumber, Contract, Wallet, ethers } from \"ethers\";\nimport { IFunder, Maybe } from \"types\";\nimport idoAbi from \"abis/idoSec.json\";\n\nclass IDOSecService {\n  provider: any;\n  contract: Contract;\n\n  constructor(provider: any, signerAddress: Maybe<string>, addr: string) {\n    this.provider = provider;\n    if (signerAddress) {\n      const signer: Wallet = provider.getSigner();\n      this.contract = new ethers.Contract(addr, idoAbi, provider).connect(\n        signer\n      );\n    } else {\n      this.contract = new ethers.Contract(addr, idoAbi, provider);\n    }\n  }\n\n  get address(): string {\n    return this.contract.address;\n  }\n\n  async getMaxAllocation(address: string) {\n    return this.contract.getMaxAllocation(address);\n  }\n\n  async getClaimableAmount(address: string) {\n    return this.contract.getClaimableAmount(address);\n  }\n\n  async whitelistEnabled() {\n    return this.contract.whitelistEnabled();\n  }\n\n  async getFunderInfo(address: string): Promise<IFunder> {\n    const funder = await this.contract.getFunderInfo(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[1],\n    };\n  }\n\n  async whitelistFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.whitelistFunders(address);\n    return {\n      totalFunded: funder[0],\n\n      release: funder[1],\n    };\n  }\n\n  async fcfsFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.fcfsFunders(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[1],\n    };\n  }\n\n  async getRoundTotalAllocation(roundId: BigNumber) {\n    return this.contract.getRoundTotalAllocation(roundId);\n  }\n\n  async getCurrentRoundId() {\n    return this.contract.getCurrentRoundId();\n  }\n\n  async buyWithBNB(\n    amount: BigNumber,\n    gasPrice: BigNumber,\n    gasLimit: BigNumber\n  ) {\n    const transactionObject = await this.contract.buyWithBNB({\n      value: amount,\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`buyWithBNB transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async buy(amount: BigNumber, gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.buy(amount, {\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`buy transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async estimateGas(func: string, args: any[], value?: BigNumber) {\n    return this.contract.estimateGas[func](...args, { value: value || \"0x0\" });\n  }\n\n  async claim(gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.claim({\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`Claim transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n}\n\nexport { IDOSecService };\n"],"sourceRoot":""}