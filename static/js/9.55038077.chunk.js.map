{"version":3,"sources":["../node_modules/copy-to-clipboard/index.js","../node_modules/toggle-selection/index.js","../node_modules/@material-ui/icons/DeveloperMode.js","../node_modules/@material-ui/icons/FileCopy.js","../node_modules/@material-ui/icons/ChevronLeft.js","../node_modules/@material-ui/icons/Panorama.js","pages/IDODetailsPage/components/OverviewSection/index.tsx","pages/IDODetailsPage/components/ActionSection/index.tsx","pages/IDODetailsPage/components/StatusSection/index.tsx","pages/IDODetailsPage/components/GallerySection/index.tsx","services/idoRefund.ts","pages/IDODetailsPage/components/RefundSection/index.tsx","services/idov4.ts","pages/IDODetailsPage/IDODetailsContent.tsx","pages/IDODetailsPage/index.tsx"],"names":["deselectCurrent","require","clipboardToIE11Formatting","module","exports","text","options","debug","message","reselectPrevious","range","selection","mark","success","document","createRange","getSelection","createElement","textContent","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","console","warn","window","clearData","setData","onCopy","body","appendChild","selectNodeContents","addRange","execCommand","Error","err","error","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","type","forEach","focus","_interopRequireDefault","_interopRequireWildcard","Object","defineProperty","value","default","React","_default","d","useStyles","makeStyles","theme","root","display","alignItems","padding","breakpoints","down","flexDirection","colors","neutralLight","content","flex","logoWrapper","marginRight","borderRadius","alignSelf","logo","width","height","title","color","neutralLighter","fontSize","fontWeight","header","marginBottom","symbol","neutralDark","backgroundColor","transparentize","marginTop","letterSpacing","description","bottom","justifyContent","paddingTop","contractWrapper","primary","textDecoration","copy","cursor","transition","opacity","meta","OverviewSection","props","data","address","tokenSymbol","classes","networkId","useConnectedWeb3Context","etherscanUri","getEtherscanUri","enqueueSnackbar","useSnackbar","className","src","imgClassName","Typography","href","target","rel","shortenAddress","onClick","backgroundPosition","label","balanceLabel","gray2","headerLabel","headerTimer","footer","button","linkButton","black","ActionSection","onBuy","personalRoundMaxAllocation","personalRoundFunded","personalReleasableAmount","onClaim","tierWhitelisted","whitelistEnabled","currentRound","tierId","roundsTotalAllocation","personalReleased","startTime","endTime","useState","setCounter","increateCounter","counter","amount","ZERO","state","setState","fundTokenBalance","useTokenBalance","fundToken","balance","history","useHistory","getTokenFromAddress","status","getIDOStatus","hasWhitelistFunctionality","includes","version","isDisabled","IDOVersion","sec","isZero","add","lt","minFundAmount","gt","rounds","find","round","roundId","eq","fundRaised","toString","toNumber","maxInputValue","maxInput","sub","currentRoundFundRaised","remain","IDOStatus","Upcoming","destTimeStamp","onReached","Ongoing","Ended","saleToken","NULL_ADDRESS","claimTime","Claimable","distributePercentAtClaim","lastTime","cliffTime","vestingDuration","vestingPeriodicity","currentTimeStamp","getCurrentTimeStamp","nextClaimTime","Math","ceil","showNextVestingInfo","moment","Date","utc","NETWORK_NAMES","numberWithCommas","formatBigNumber","saleTarget","tokenDecimals","fundTarget","decimals","hideInsignificantZeros","mul","ETHER_DECIMAL","parseUnits","BigNumber","from","div","CLAIM_LINKS","token","onChange","newValue","prev","onMax","Button","fullWidth","variant","disabled","second","borderTop","textAlign","borderLeft","section","totalSold","totalFundLabel","roundLabel","sixth","roundProgress","roundTimer","StatusSection","personalTotalFund","personalTotalSaleToken","isV1","percent","Grid","container","spacing","item","xs","align","saleRaised","thick","floor","prevHistory","id","roundInfo","roundFundRaised","roundTotalAllocation","isCurrent","roundStartTime","roundEndTime","roundPeriod","values","IDORound","renderV2Progress","getTimeStr","clsx","TIERS","name","renderV2","marginLeft","margin","overflowX","paddingBottom","imgWrapper","img","border","GallerySection","imgWidths","images","map","image","onImgLoaded","imgStyle","IDORefundService","provider","signerAddress","addr","contract","this","signer","getSigner","ethers","Contract","idoRefundAbi","connect","a","refund","transactionObject","log","hash","backgroundImage","RefundSection","account","library","setTxModalInfo","refunded","multicall","useServices","isMountedRef","useIsMountedRef","loadInfo","infoPools","params","multicallv2","requireSuccess","totalFunded","current","onRefund","refundService","txId","waitForTransaction","useEffect","IDOv4Service","idoAbi","getMaxAllocation","getClaimableAmount","isTierWhitelisted","getFunderInfo","funder","release","tierFunders","whitelistFunders","fcfsFunders","getRoundTotalAllocation","getCurrentRoundId","gasPrice","gasLimit","buyWithBNB","buy","func","args","estimateGas","claim","mainContainer","IDODetailsContent","setWalletConnectModalOpened","refundContract","REFUND_CONTRACTS","toLowerCase","loadPublicInfo","v1","v2","ido","IDOv2Service","DefaultReadonlyProvider","Promise","roundsMaxAllocations","index","IDOSecService","IDOv3Service","loadPersonalRoundInfo","loadPersonalInfo","IDOService","releasable","tier","TierService","getTierFactor","getTierId","interval","setInterval","clearInterval","_hex","ERC20Service","hasEnoughAllowance","approveUnlimited","tx","getGasPrice","estimatedGas","calculateGasMargin","onReloadIDO","claimEstimateGas","md","sm","length","IDODetailsPage","useParams","useIDO","loading","load","isAddress","IDOS_TO_HIDE"],"mappings":"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","file":"static/js/9.55038077.chunk.js","sourcesContent":["\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 5h10v2h2V3c0-1.1-.9-1.99-2-1.99L7 1c-1.1 0-2 .9-2 2v4h2V5zm8.41 11.59L20 12l-4.59-4.59L14 8.83 17.17 12 14 15.17l1.41 1.42zM10 15.17L6.83 12 10 8.83 8.59 7.41 4 12l4.59 4.59L10 15.17zM17 19H7v-2H5v4c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2v-4h-2v2z\"\n}), 'DeveloperMode');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z\"\n}), 'FileCopy');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"\n}), 'ChevronLeft');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M23 18V6c0-1.1-.9-2-2-2H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zM8.5 12.5l2.5 3.01L14.5 11l4.5 6H5l3.5-4.5z\"\n}), 'Panorama');\n\nexports.default = _default;","import { Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport { IDOMetaDataRow, LazyImage } from \"components\";\nimport React from \"react\";\nimport { IIDO, IMetadata } from \"types\";\nimport DeveloperModeIcon from \"@material-ui/icons/DeveloperMode\";\nimport ContentCopyIcon from \"@material-ui/icons/FileCopy\";\nimport copy from \"copy-to-clipboard\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { getEtherscanUri } from \"config/networks\";\nimport { shortenAddress } from \"utils\";\nimport { transparentize } from \"polished\";\nimport { useSnackbar } from \"notistack\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    padding: 16,\n    [theme.breakpoints.down(\"xs\")]: {\n      flexDirection: \"column\",\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      padding: 0,\n    },\n    backgroundColor: theme.colors.neutralLight,\n  },\n  content: { padding: 16, flex: 1 },\n  logoWrapper: {\n    marginRight: 16,\n    // backgroundColor: theme.colors.primary,\n    borderRadius: \"50%\",\n    [theme.breakpoints.down(\"xs\")]: {\n      alignSelf: \"center\",\n    },\n  },\n  logo: {\n    borderRadius: \"50%\",\n    width: 60,\n    height: 60,\n  },\n  title: {\n    color: theme.colors.neutralLighter,\n    fontSize: 24,\n    fontWeight: 600,\n  },\n\n  header: {\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    marginBottom: 16,\n  },\n  symbol: {\n    color: theme.colors.neutralDark,\n    fontSize: 14,\n    backgroundColor: transparentize(0.2, theme.colors.neutralLighter),\n    padding: \"4px 10px\",\n\n    marginTop: 12,\n    fontWeight: 700,\n    letterSpacing: 1,\n  },\n  description: { color: theme.colors.neutralLighter, fontSize: 14 },\n  bottom: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    paddingTop: 16,\n    flexDirection: \"column\",\n  },\n  contractWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: 16,\n    \"& div\": {\n      color: theme.colors.primary,\n      padding: 2,\n\n      backgroundColor: transparentize(0.8, theme.colors.primary),\n      \"& svg\": {\n        height: 18,\n        width: 18,\n      },\n    },\n    \"& span\": {\n      color: theme.colors.neutralLighter,\n    },\n    \"& a\": { color: theme.colors.primary, padding: 2, textDecoration: \"none\" },\n  },\n  copy: {\n    cursor: \"pointer\",\n    transition: \"all 0.4s\",\n    \"&:hover\": {\n      opacity: 0.7,\n    },\n    \"& svg\": {\n      height: 18,\n      width: 18,\n    },\n  },\n  meta: {\n    marginBottom: -12,\n    [theme.breakpoints.down(\"sm\")]: {\n      marginBottom: 0,\n    },\n  },\n  warn: {\n    color: \"#a00\",\n    marginTop: 4,\n  },\n}));\n\ninterface IProps {\n  data: IIDO & { meta: Required<IMetadata> };\n}\n\nexport const OverviewSection = (props: IProps) => {\n  const {\n    data: {\n      address,\n      meta: { logo, title, tokenSymbol, description },\n    },\n  } = props;\n\n  const classes = useStyles();\n  const { networkId } = useConnectedWeb3Context();\n  const etherscanUri = getEtherscanUri(networkId);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const onCopy = () => {\n    copy(address);\n    enqueueSnackbar(\"Copied to clipboard\");\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.content}>\n        <div className={classes.header}>\n          <LazyImage\n            src={logo}\n            className={classes.logoWrapper}\n            imgClassName={classes.logo}\n          />\n          <Typography className={classes.title}>\n            {title} <span className={classes.symbol}>{tokenSymbol}</span>\n          </Typography>\n        </div>\n        <Typography className={classes.description}>{description}</Typography>\n        <div className={classes.bottom}>\n          <IDOMetaDataRow data={props.data.meta} className={classes.meta} />\n          <div>\n            <div className={classes.contractWrapper}>\n              <div>\n                <DeveloperModeIcon />\n              </div>\n              &nbsp;\n              <span>Contract:</span>&nbsp;\n              <a\n                href={`${etherscanUri}address/${address}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {shortenAddress(address)}\n              </a>\n              &nbsp;\n              <span className={classes.copy} onClick={onCopy}>\n                <ContentCopyIcon />\n              </span>\n            </div>\n            <Typography className={classes.warn}>\n              Don't send money to this address\n            </Typography>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { BigNumberInput, CountDownTimer } from \"components\";\nimport { getTokenFromAddress } from \"config/networks\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { BigNumber } from \"ethers\";\nimport { useTokenBalance } from \"helpers\";\nimport { transparentize } from \"polished\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { IIDO, IMetadata, IToken } from \"types\";\nimport {\n  formatBigNumber,\n  hideInsignificantZeros,\n  numberWithCommas,\n} from \"utils\";\nimport { IDOStatus, IDOVersion } from \"utils/enums\";\nimport { getCurrentTimeStamp, getIDOStatus } from \"utils/ido\";\nimport { ZERO } from \"utils/number\";\nimport moment from \"moment-timezone\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport {\n  CLAIM_LINKS,\n  ETHER_DECIMAL,\n  NETWORK_NAMES,\n  NULL_ADDRESS,\n} from \"config/constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: 16,\n    backgroundPosition: \"top\",\n    backgroundColor: theme.colors.neutralLight,\n  },\n  header: { padding: 12 },\n  label: {\n    color: theme.colors.neutralLighter,\n    fontWeight: 300,\n    \"& span\": {\n      fontWeight: 800,\n    },\n    \"& + &\": {\n      marginTop: 8,\n    },\n  },\n  balanceLabel: {\n    color: theme.colors.gray2,\n    fontSize: 14,\n    marginTop: 8,\n  },\n  headerLabel: { color: theme.colors.gray2, fontSize: 14 },\n  headerTimer: {\n    fontSize: 24,\n    fontWeight: 600,\n  },\n  footer: { paddingTop: 16 },\n  button: {\n    height: 40,\n\n    \"&:disabled\": {\n      backgroundColor: `${transparentize(0.4, theme.colors.gray2)} !important`,\n      \"& span\": {\n        color: `${transparentize(0.4, theme.colors.neutralLighter)} !important`,\n      },\n    },\n  },\n  linkButton: {\n    height: 40,\n\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textDecoration: \"none\",\n    backgroundColor: theme.colors.primary,\n    color: theme.colors.black,\n    fontWeight: 600,\n  },\n}));\n\ninterface IProps {\n  data: IIDO & { meta: Required<IMetadata> };\n  onBuy: (_: BigNumber) => Promise<void>;\n  onClaim: () => Promise<void>;\n  personalRoundMaxAllocation: BigNumber;\n  personalRoundFunded: BigNumber;\n  personalReleasableAmount: BigNumber;\n  personalReleased: BigNumber;\n  currentRound: BigNumber;\n  tierWhitelisted: boolean;\n  whitelistEnabled: boolean;\n  tierId: number;\n  roundsTotalAllocation: { [key: string]: BigNumber };\n}\n\ninterface IState {\n  amount: BigNumber;\n}\n\nexport const ActionSection = (props: IProps) => {\n  const {\n    data,\n    onBuy,\n    personalRoundMaxAllocation,\n    personalRoundFunded,\n    personalReleasableAmount,\n    onClaim,\n    tierWhitelisted,\n    whitelistEnabled,\n    currentRound,\n    tierId,\n    roundsTotalAllocation,\n    personalReleased,\n  } = props;\n  const classes = useStyles();\n  const { startTime, endTime } = data;\n  const { networkId } = useConnectedWeb3Context();\n  const [counter, setCounter] = useState(1);\n  const increateCounter = () => setCounter((counter) => counter + 1);\n  const [state, setState] = useState<IState>({ amount: ZERO });\n  const { balance: fundTokenBalance } = useTokenBalance(data.fundToken);\n\n  const history = useHistory();\n\n  let fundToken: IToken | null = null;\n\n  try {\n    fundToken = getTokenFromAddress(data.fundToken, networkId);\n  } catch (error) {\n    history.push(\"/idos\");\n  }\n  const status = getIDOStatus(data);\n\n  const hasWhitelistFunctionality = [\"v3\", \"v4\"].includes(data.version);\n\n  const isDisabled = (() => {\n    if (data.version === IDOVersion.sec) {\n      if (\n        state.amount.isZero() ||\n        personalRoundFunded.add(state.amount).lt(data.minFundAmount) ||\n        personalRoundFunded.add(state.amount).gt(personalRoundMaxAllocation) ||\n        state.amount.gt(fundTokenBalance)\n      ) {\n        return true;\n      }\n\n      const roundInfo = data.rounds.find((round) =>\n        round.roundId.eq(currentRound)\n      );\n      const currentRoundFundRaised = (roundInfo || {}).fundRaised || ZERO;\n\n      if (\n        currentRoundFundRaised\n          .add(state.amount)\n          .gt(roundsTotalAllocation[currentRound.toString()])\n      ) {\n        return true;\n      }\n\n      return false;\n    }\n\n    if (\n      state.amount.isZero() ||\n      personalRoundFunded.add(state.amount).lt(data.minFundAmount) ||\n      personalRoundFunded.add(state.amount).gt(personalRoundMaxAllocation) ||\n      state.amount.gt(fundTokenBalance) ||\n      (hasWhitelistFunctionality &&\n        whitelistEnabled &&\n        !tierWhitelisted &&\n        currentRound.toNumber() <= 4)\n    ) {\n      return true;\n    }\n\n    if (currentRound.toNumber() <= 4 && tierId <= 4) {\n      if (tierId === 0 || currentRound.isZero()) {\n        return true;\n      }\n      const roundInfo = data.rounds.find(\n        (round) => round.roundId.toNumber() === 5 - tierId\n      );\n      const currentRoundFundRaised = (roundInfo || {}).fundRaised || ZERO;\n\n      if (\n        currentRoundFundRaised\n          .add(state.amount)\n          .gt(roundsTotalAllocation[5 - tierId])\n      ) {\n        return true;\n      }\n    } else {\n      const roundInfo = data.rounds.find((round) =>\n        round.roundId.eq(currentRound)\n      );\n      const currentRoundFundRaised = (roundInfo || {}).fundRaised || ZERO;\n\n      if (\n        currentRoundFundRaised\n          .add(state.amount)\n          .gt(roundsTotalAllocation[currentRound.toString()])\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  })();\n\n  const maxInputValue = (() => {\n    let maxInput = personalRoundMaxAllocation.sub(personalRoundFunded);\n    if (maxInput.gt(fundTokenBalance)) {\n      maxInput = fundTokenBalance;\n    }\n\n    if (\n      data.version !== IDOVersion.sec &&\n      currentRound.toNumber() <= 4 &&\n      tierId <= 4\n    ) {\n      if (tierId === 0 || currentRound.isZero()) {\n        return ZERO;\n      }\n      const roundInfo = data.rounds.find(\n        (round) => round.roundId.toNumber() === 5 - tierId\n      );\n      const currentRoundFundRaised = (roundInfo || {}).fundRaised || ZERO;\n\n      const remain = roundsTotalAllocation[5 - tierId].sub(\n        currentRoundFundRaised\n      );\n\n      if (maxInput.gt(remain)) {\n        maxInput = remain;\n      }\n    } else {\n      if (currentRound.isZero()) {\n        return ZERO;\n      }\n\n      const roundInfo = data.rounds.find((round) =>\n        round.roundId.eq(currentRound)\n      );\n      const currentRoundFundRaised = (roundInfo || {}).fundRaised || ZERO;\n      const remain = roundsTotalAllocation[currentRound.toString()].sub(\n        currentRoundFundRaised\n      );\n\n      if (maxInput.gt(remain)) {\n        maxInput = remain;\n      }\n    }\n\n    if (maxInput.lt(ZERO)) {\n      maxInput = ZERO;\n    }\n\n    return maxInput;\n  })();\n\n  if (!fundToken) return null;\n\n  const showNextVestingInfo = () => {\n    if (data.distributePercentAtClaim === 1000) {\n      return null;\n    }\n    const lastTime =\n      data.cliffTime + data.vestingDuration - data.vestingPeriodicity;\n    const currentTimeStamp = getCurrentTimeStamp();\n\n    if (lastTime < currentTimeStamp) {\n      return null;\n    }\n\n    let nextClaimTime = data.cliffTime;\n\n    if (currentTimeStamp > data.cliffTime) {\n      nextClaimTime =\n        data.cliffTime +\n        Math.ceil(\n          (currentTimeStamp - data.cliffTime) / data.vestingPeriodicity\n        ) *\n          data.vestingPeriodicity;\n    }\n\n    return (\n      <div>\n        <Typography className={classes.headerLabel}>\n          Until Next Unlock:\n        </Typography>\n        <CountDownTimer\n          destTimeStamp={nextClaimTime * 1000}\n          onReached={increateCounter}\n          className={classes.headerTimer}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        {status === IDOStatus.Upcoming && (\n          <div>\n            <Typography className={classes.headerLabel}>Start Time:</Typography>\n            <CountDownTimer\n              destTimeStamp={startTime * 1000}\n              onReached={increateCounter}\n              className={classes.headerTimer}\n            />\n          </div>\n        )}\n        {status === IDOStatus.Ongoing && (\n          <div>\n            <Typography className={classes.headerLabel}>End Time:</Typography>\n            <CountDownTimer\n              destTimeStamp={endTime * 1000}\n              onReached={increateCounter}\n              className={classes.headerTimer}\n            />\n          </div>\n        )}\n        {status === IDOStatus.Ended && (\n          <div>\n            {data.saleToken === NULL_ADDRESS ? (\n              <Typography className={classes.headerLabel}>\n                Tokens will be sent automatically 15 mins after DEX listing.\n              </Typography>\n            ) : (\n              <CountDownTimer\n                destTimeStamp={data.claimTime * 1000}\n                onReached={increateCounter}\n                className={classes.headerTimer}\n              />\n            )}\n          </div>\n        )}\n        {status === IDOStatus.Claimable && showNextVestingInfo()}\n      </div>\n      <div>\n        <Typography className={classes.label}>\n          Start Time:{\" \"}\n          <span>\n            {moment(new Date(startTime * 1000))\n              .utc()\n              .format(\"MM/DD/YYYY HH:mm\")}{\" \"}\n            GMT\n          </span>\n        </Typography>\n        <Typography className={classes.label}>\n          End Time:{\" \"}\n          <span>\n            {moment(new Date(endTime * 1000))\n              .utc()\n              .format(\"MM/DD/YYYY HH:mm\")}{\" \"}\n            GMT\n          </span>\n        </Typography>\n        <Typography className={classes.label}>\n          Symbol: <span>{data.meta.tokenSymbol}</span>\n        </Typography>\n        <Typography className={classes.label}>\n          Blockchain Network:{\" \"}\n          <span>{NETWORK_NAMES[data.address] || \"BSC\"}</span>\n        </Typography>\n        <Typography className={classes.label}>\n          Total Sale Token:{\" \"}\n          <span>\n            {numberWithCommas(\n              formatBigNumber(data.saleTarget, data.meta.tokenDecimals, 0)\n            )}{\" \"}\n            {data.meta.tokenSymbol}\n          </span>\n        </Typography>\n        <Typography className={classes.label}>\n          Total Fund Token:{\" \"}\n          <span>\n            {numberWithCommas(\n              formatBigNumber(data.fundTarget, fundToken.decimals, 0)\n            )}{\" \"}\n            {fundToken.symbol.toUpperCase()}\n          </span>\n        </Typography>\n        <Typography className={classes.label}>\n          Min Fund Token:{\" \"}\n          <span>\n            {formatBigNumber(data.minFundAmount, fundToken.decimals, 0)}{\" \"}\n            {fundToken.symbol.toUpperCase()}\n          </span>\n        </Typography>\n        <Typography className={classes.label}>\n          1 {fundToken.symbol.toUpperCase()} ={\" \"}\n          <span>\n            {numberWithCommas(\n              hideInsignificantZeros(\n                formatBigNumber(\n                  data.saleTarget\n                    .mul(\n                      data.meta.tokenDecimals < ETHER_DECIMAL\n                        ? parseUnits(\n                            \"1\",\n                            ETHER_DECIMAL - data.meta.tokenDecimals\n                          )\n                        : BigNumber.from(1)\n                    )\n                    .mul(1000000)\n                    .div(\n                      data.fundTarget.mul(\n                        fundToken.decimals < ETHER_DECIMAL\n                          ? parseUnits(\"1\", ETHER_DECIMAL - fundToken.decimals)\n                          : BigNumber.from(1)\n                      )\n                    ),\n                  6,\n                  6\n                )\n              )\n            )}{\" \"}\n            {data.meta.tokenSymbol}\n          </span>\n        </Typography>\n        <Typography className={classes.label}>\n          1 {data.meta.tokenSymbol} ={\" \"}\n          <span>\n            {numberWithCommas(\n              hideInsignificantZeros(\n                formatBigNumber(\n                  data.fundTarget\n                    .mul(\n                      fundToken.decimals < ETHER_DECIMAL\n                        ? parseUnits(\"1\", ETHER_DECIMAL - fundToken.decimals)\n                        : BigNumber.from(1)\n                    )\n                    .mul(1000000)\n                    .div(\n                      data.saleTarget.mul(\n                        data.meta.tokenDecimals < ETHER_DECIMAL\n                          ? parseUnits(\n                              \"1\",\n                              ETHER_DECIMAL - data.meta.tokenDecimals\n                            )\n                          : BigNumber.from(1)\n                      )\n                    ),\n                  6,\n                  6\n                )\n              )\n            )}{\" \"}\n            {fundToken.symbol.toUpperCase()}\n          </span>\n        </Typography>\n        {status === IDOStatus.Claimable &&\n          data.saleToken !== NULL_ADDRESS &&\n          !CLAIM_LINKS[data.address] && (\n            <>\n              <Typography className={classes.label}>\n                Total Claimed:{\" \"}\n                <span>\n                  {formatBigNumber(personalReleased, data.meta.tokenDecimals)}{\" \"}\n                  {data.meta.tokenSymbol}\n                </span>\n              </Typography>\n              <Typography className={classes.label}>\n                Cliamable Amount:{\" \"}\n                <span>\n                  {formatBigNumber(\n                    personalReleasableAmount,\n                    data.meta.tokenDecimals\n                  )}{\" \"}\n                  {data.meta.tokenSymbol}\n                </span>\n              </Typography>\n            </>\n          )}\n      </div>\n      <div className={classes.footer}>\n        {status === IDOStatus.Ongoing && (\n          <div>\n            <BigNumberInput\n              value={state.amount}\n              token={fundToken}\n              onChange={(newValue) =>\n                setState((prev) => ({ ...prev, amount: newValue }))\n              }\n              onMax={() => {\n                setState((prev) => ({ ...prev, amount: maxInputValue }));\n              }}\n            />\n            <Typography className={classes.balanceLabel}>\n              {fundToken.symbol.toUpperCase()} Balance:{\" \"}\n              {formatBigNumber(fundTokenBalance, fundToken.decimals)}\n            </Typography>\n            <br />\n            <Button\n              className={classes.button}\n              color=\"primary\"\n              fullWidth\n              variant=\"contained\"\n              onClick={() => onBuy(state.amount)}\n              disabled={isDisabled}\n            >\n              Buy Token\n            </Button>\n          </div>\n        )}\n        {status === IDOStatus.Claimable &&\n          (CLAIM_LINKS[data.address] ? (\n            <>\n              <a\n                href={CLAIM_LINKS[data.address]}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                className={classes.linkButton}\n              >\n                Claim Token\n              </a>\n            </>\n          ) : data.saleToken !== NULL_ADDRESS ? (\n            <div>\n              <Typography className={classes.label}>\n                You should keep your <span>TIER</span> to claim the tokens for\n                the funds you raised during tier rounds\n              </Typography>\n              <br />\n              <Button\n                className={classes.button}\n                color=\"primary\"\n                fullWidth\n                variant=\"contained\"\n                onClick={onClaim}\n                disabled={personalReleasableAmount.isZero()}\n              >\n                Claim Token\n              </Button>\n            </div>\n          ) : (\n            <div>\n              <Typography className={classes.label}>\n                Tokens are distributed at the same time\n              </Typography>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n","import { Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport { CountDownTimer, ProgressBar, TIERS } from \"components\";\nimport { getTokenFromAddress } from \"config/networks\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { BigNumber } from \"ethers\";\nimport { transparentize } from \"polished\";\nimport React, { useState } from \"react\";\nimport { IIDO, IMetadata, IToken } from \"types\";\nimport { formatBigNumber, numberWithCommas } from \"utils\";\nimport { IDOStatus, IDORound, IDOVersion } from \"utils/enums\";\nimport { getCurrentTimeStamp, getIDOStatus, getTimeStr } from \"utils/ido\";\nimport moment from \"moment-timezone\";\nimport { ZERO } from \"utils/number\";\nimport { useHistory } from \"react-router-dom\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: 16,\n    backgroundPosition: \"top\",\n    backgroundColor: theme.colors.neutralLight,\n  },\n  second: {\n    borderTop: `1px solid ${transparentize(0.4, theme.colors.neutralLighter)}`,\n    textAlign: \"center\",\n    [theme.breakpoints.down(\"sm\")]: {\n      borderTop: `1px solid ${transparentize(\n        0.4,\n        theme.colors.neutralLighter\n      )}`,\n      borderLeft: \"none\",\n    },\n  },\n  section: {\n    padding: \"0 12px\",\n  },\n  totalSold: {\n    color: theme.colors.neutralLighter,\n    fontSize: 20,\n    fontWeight: 600,\n    \"& span\": {\n      color: theme.colors.primary,\n    },\n    marginBottom: 12,\n  },\n  totalFundLabel: {\n    color: theme.colors.gray2,\n    fontSize: 14,\n    marginTop: 8,\n  },\n  roundLabel: {\n    color: theme.colors.neutralLighter,\n    fontSize: 16,\n    fontWeight: 600,\n    \"& span\": {\n      color: theme.colors.primary,\n    },\n    marginBottom: 4,\n  },\n  label: {\n    color: theme.colors.neutralLighter,\n    fontWeight: 300,\n    \"& span\": {\n      fontWeight: 800,\n    },\n    \"&.error\": {\n      color: theme.colors.error,\n    },\n    \"&.success\": { color: theme.colors.sixth },\n    \"& + &\": {\n      marginTop: 8,\n    },\n  },\n  roundProgress: {\n    padding: \"8px 0\",\n    borderTop: `1px dashed ${transparentize(0.9, theme.colors.neutralLighter)}`,\n  },\n  roundTimer: {\n    justifyContent: \"center\",\n  },\n}));\n\ninterface IProps {\n  data: IIDO & { meta: Required<IMetadata> };\n  personalTotalFund: BigNumber;\n  currentRound: BigNumber;\n  roundsTotalAllocation: { [key: string]: BigNumber };\n  personalRoundMaxAllocation: BigNumber;\n  personalRoundFunded: BigNumber;\n  tierWhitelisted: boolean;\n  whitelistEnabled: boolean;\n  tierId: number;\n}\n\nexport const StatusSection = (props: IProps) => {\n  const {\n    data,\n    personalRoundFunded,\n    personalRoundMaxAllocation,\n    personalTotalFund,\n    currentRound,\n    roundsTotalAllocation,\n    tierWhitelisted,\n    whitelistEnabled,\n    tierId,\n  } = props;\n  const personalTotalSaleToken = personalTotalFund\n    .mul(data.saleTarget)\n    .div(data.fundTarget);\n  const classes = useStyles();\n  const { networkId } = useConnectedWeb3Context();\n  const history = useHistory();\n\n  let fundToken: IToken | null = null;\n\n  try {\n    fundToken = getTokenFromAddress(data.fundToken, networkId);\n  } catch (error) {\n    history.push(\"/idos\");\n  }\n\n  const isV1 = data.version === \"v1\";\n  const status = getIDOStatus(data);\n\n  const percent =\n    data.fundRaised.mul(10000).div(data.fundTarget).toNumber() / 100;\n\n  const [counter, setCounter] = useState(1);\n  const increateCounter = () => setCounter((counter) => counter + 1);\n  const currentTimeStamp = getCurrentTimeStamp();\n\n  const renderV2Progress = () => {\n    if (!fundToken) return null;\n    if (status === IDOStatus.Upcoming) return null;\n    const prevHistory = [];\n\n    if (data.version === IDOVersion.sec) {\n      for (let id = 1; id <= 2; id++) {\n        const roundInfo = data.rounds.find((round) => round.roundId.eq(id));\n        const roundFundRaised = roundInfo ? roundInfo.fundRaised : ZERO;\n        const roundTotalAllocation = roundsTotalAllocation[id] || ZERO;\n        const percent = roundTotalAllocation.isZero()\n          ? 0\n          : roundFundRaised.mul(100).div(roundTotalAllocation).toNumber();\n\n        const isCurrent = id === currentRound.toNumber();\n\n        let roundStartTime = data.startTime;\n        let roundEndTime = data.endTime;\n\n        const roundPeriod = Math.floor((data.endTime - data.startTime) / 2);\n\n        roundStartTime = data.startTime + roundPeriod * (id - 1);\n\n        if (currentRound.toNumber() !== 2) {\n          roundEndTime = data.startTime + roundPeriod * id;\n        }\n\n        prevHistory.push(\n          <div key={`${id}`}>\n            <div className={classes.roundProgress}>\n              <Typography align=\"center\" className={classes.roundLabel}>\n                {(Object.values(IDORound) as any)[id + 4]}\n              </Typography>\n              <ProgressBar\n                percent={percent}\n                label={`Sold ${Math.floor(percent)}%`}\n              />\n              {currentTimeStamp > roundStartTime && (\n                <Typography align=\"center\" className={classes.totalFundLabel}>\n                  {numberWithCommas(\n                    formatBigNumber(roundFundRaised, fundToken.decimals)\n                  )}{\" \"}\n                  {fundToken.symbol.toUpperCase()} of{\" \"}\n                  {numberWithCommas(\n                    formatBigNumber(\n                      roundsTotalAllocation[id] || ZERO,\n                      fundToken.decimals\n                    )\n                  )}{\" \"}\n                  {fundToken.symbol.toUpperCase()}\n                </Typography>\n              )}\n              <Typography align=\"center\" className={classes.totalFundLabel}>\n                {moment(new Date(roundStartTime * 1000))\n                  .utc()\n                  .format(\"MM/DD/YYYY HH:mm\")}{\" \"}\n                GMT -{\" \"}\n                {moment(new Date(roundEndTime * 1000))\n                  .utc()\n                  .format(\"MM/DD/YYYY HH:mm\")}{\" \"}\n                GMT\n              </Typography>\n            </div>\n            {isCurrent && status === IDOStatus.Ongoing && (\n              <>\n                <CountDownTimer\n                  className={classes.roundTimer}\n                  destTimeStamp={roundEndTime * 1000}\n                  onReached={increateCounter}\n                />\n                <br />\n              </>\n            )}\n          </div>\n        );\n      }\n    } else {\n      for (let id = 1; id <= 6; id++) {\n        const roundInfo = data.rounds.find((round) => round.roundId.eq(id));\n        const roundFundRaised = roundInfo ? roundInfo.fundRaised : ZERO;\n        const roundTotalAllocation = roundsTotalAllocation[id] || ZERO;\n        const percent = roundTotalAllocation.isZero()\n          ? 0\n          : roundFundRaised.mul(100).div(roundTotalAllocation).toNumber();\n\n        const isCurrent = id === currentRound.toNumber();\n\n        let roundStartTime = data.startTime;\n        let roundEndTime = data.endTime;\n\n        const roundPeriod = Math.floor((data.endTime - data.startTime) / 6);\n\n        if (data.version === \"v4\" && id <= 4) {\n          roundEndTime = roundStartTime + roundPeriod * 4;\n        } else {\n          roundStartTime = data.startTime + roundPeriod * (id - 1);\n\n          if (currentRound.toNumber() !== 6) {\n            roundEndTime = data.startTime + roundPeriod * id;\n          }\n        }\n\n        prevHistory.push(\n          <div key={`${id}`}>\n            <div className={classes.roundProgress}>\n              <Typography align=\"center\" className={classes.roundLabel}>\n                {(Object.values(IDORound) as any)[id]}\n              </Typography>\n              <ProgressBar\n                percent={percent}\n                label={`Sold ${Math.floor(percent)}%`}\n              />\n              {currentTimeStamp > roundStartTime && (\n                <Typography align=\"center\" className={classes.totalFundLabel}>\n                  {numberWithCommas(\n                    formatBigNumber(roundFundRaised, fundToken.decimals)\n                  )}{\" \"}\n                  {fundToken.symbol.toUpperCase()} of{\" \"}\n                  {numberWithCommas(\n                    formatBigNumber(\n                      roundsTotalAllocation[id] || ZERO,\n                      fundToken.decimals\n                    )\n                  )}{\" \"}\n                  {fundToken.symbol.toUpperCase()}\n                </Typography>\n              )}\n              <Typography align=\"center\" className={classes.totalFundLabel}>\n                {moment(new Date(roundStartTime * 1000))\n                  .utc()\n                  .format(\"MM/DD/YYYY HH:mm\")}{\" \"}\n                GMT -{\" \"}\n                {moment(new Date(roundEndTime * 1000))\n                  .utc()\n                  .format(\"MM/DD/YYYY HH:mm\")}{\" \"}\n                GMT\n              </Typography>\n            </div>\n            {((id > 4 && isCurrent) || id <= 4) &&\n              status === IDOStatus.Ongoing && (\n                <>\n                  <CountDownTimer\n                    className={classes.roundTimer}\n                    destTimeStamp={roundEndTime * 1000}\n                    onReached={increateCounter}\n                  />\n                  <br />\n                </>\n              )}\n          </div>\n        );\n      }\n    }\n\n    return (\n      <>\n        <br />\n        {prevHistory}\n      </>\n    );\n  };\n  const renderV2 = () => {\n    if (!fundToken) return null;\n    if (status === IDOStatus.Upcoming || currentRound.toNumber() === 0)\n      return null;\n\n    const hasWhitelistFunctionality = [\"v3\", \"v4\"].includes(data.version);\n\n    return (\n      <>\n        {hasWhitelistFunctionality &&\n          whitelistEnabled &&\n          currentRound.toNumber() <= 4 && (\n            <Typography className={classes.label}>\n              Only whitelisted tiers can purchase during tier round\n            </Typography>\n          )}\n        {hasWhitelistFunctionality &&\n          whitelistEnabled &&\n          currentRound.toNumber() <= 4 && (\n            <Typography\n              className={clsx(\n                classes.label,\n                tierWhitelisted ? \"success\" : \"error\"\n              )}\n            >\n              {tierWhitelisted\n                ? \"You're whitelisted\"\n                : \"You're not whitelisted\"}\n            </Typography>\n          )}\n        <Typography className={classes.label}>\n          Your max alloc:{\" \"}\n          <span>\n            {numberWithCommas(\n              formatBigNumber(personalRoundMaxAllocation, fundToken.decimals, 2)\n            )}{\" \"}\n            {fundToken.symbol.toUpperCase()}\n          </span>\n        </Typography>\n        {data.version !== IDOVersion.sec && (\n          <Typography className={classes.label}>\n            Your Tier:{\" \"}\n            <span>{tierId > 0 ? TIERS[4 - tierId].name : \"None\"}</span>\n          </Typography>\n        )}\n        <Typography className={classes.label}>\n          Your{\" \"}\n          {currentRound.toNumber() <= 4 && data.version !== IDOVersion.sec\n            ? \"tier rounds\"\n            : \"round\"}{\" \"}\n          raised:{\" \"}\n          <span>\n            {numberWithCommas(\n              formatBigNumber(personalRoundFunded, fundToken.decimals, 2)\n            )}{\" \"}\n            {fundToken.symbol.toUpperCase()}\n          </span>\n        </Typography>\n      </>\n    );\n  };\n\n  if (!fundToken) return null;\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <div className={classes.section}>\n            <Typography align=\"center\" className={classes.totalSold}>\n              Total Sold:{\" \"}\n              <span>\n                {numberWithCommas(\n                  formatBigNumber(data.saleRaised, data.meta.tokenDecimals, 0)\n                )}{\" \"}\n                {data.meta.tokenSymbol}\n              </span>\n            </Typography>\n            <ProgressBar\n              percent={percent}\n              thick\n              label={`Total Sold ${Math.floor(percent)}%`}\n            />\n            <Typography align=\"center\" className={classes.totalFundLabel}>\n              {numberWithCommas(\n                formatBigNumber(data.fundRaised, fundToken.decimals, 0)\n              )}{\" \"}\n              {fundToken.symbol.toUpperCase()} of{\" \"}\n              {numberWithCommas(\n                formatBigNumber(data.fundTarget, fundToken.decimals, 0)\n              )}{\" \"}\n              {fundToken.symbol.toUpperCase()}\n            </Typography>\n            {!isV1 && renderV2Progress()}\n          </div>\n        </Grid>\n        <Grid item xs={12} className={classes.second}>\n          <div className={classes.section}>\n            <Typography className={classes.label}>\n              Your total fund:{\" \"}\n              <span>\n                {numberWithCommas(\n                  formatBigNumber(personalTotalFund, fundToken.decimals)\n                )}{\" \"}\n                {fundToken.symbol.toUpperCase()}\n              </span>\n            </Typography>\n            <Typography className={classes.label}>\n              Your total sale token:{\" \"}\n              <span>\n                {numberWithCommas(\n                  formatBigNumber(\n                    personalTotalSaleToken,\n                    data.meta.tokenDecimals\n                  )\n                )}{\" \"}\n                {data.meta.tokenSymbol}\n              </span>\n            </Typography>\n            {data.cliffTime !== 0 && data.distributePercentAtClaim < 1000 && (\n              <>\n                <Typography className={classes.label}>\n                  Cliff Time Start:{\" \"}\n                  <span>\n                    {moment(new Date(data.cliffTime * 1000))\n                      .utc()\n                      .format(\"MM/DD/YYYY HH:mm\")}{\" \"}\n                    GMT\n                  </span>\n                </Typography>\n                <Typography className={classes.label}>\n                  Vesting Duration:{\" \"}\n                  <span>{getTimeStr(data.vestingDuration)}</span>\n                </Typography>\n                <Typography className={classes.label}>\n                  Vesting Periodicity:{\" \"}\n                  <span>{getTimeStr(data.vestingPeriodicity)}</span>\n                </Typography>\n              </>\n            )}\n            {!isV1 && renderV2()}\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { IIDO, IMetadata } from \"types\";\nimport PanoramaIcon from \"@material-ui/icons/Panorama\";\nimport { LazyImage } from \"components\";\nimport { transparentize } from \"polished\";\n\nconst IMAGE_HEIGHT = 150;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: 16,\n  },\n  header: {\n    display: \"flex\",\n    alignItems: \"center\",\n    color: theme.colors.primary,\n  },\n  title: {\n    color: theme.colors.neutralLighter,\n    fontSize: 24,\n    fontWeight: 600,\n    marginLeft: 12,\n  },\n  content: {\n    marginTop: 12,\n    display: \"flex\",\n    // flexWrap: \"wrap\",\n    margin: \"0 -6px\",\n    overflowX: \"auto\",\n    paddingBottom: 16,\n  },\n  imgWrapper: {\n    margin: 6,\n    height: IMAGE_HEIGHT,\n    // minWidth: IMAGE_HEIGHT,\n  },\n  img: {\n    height: IMAGE_HEIGHT,\n\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n  },\n}));\n\ninterface IProps {\n  data: IIDO & { meta: Required<IMetadata> };\n}\n\ninterface IState {\n  imgWidths: { [key: string]: number };\n}\n\nexport const GallerySection = (props: IProps) => {\n  const classes = useStyles();\n  const [state, setState] = useState<IState>({ imgWidths: {} });\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <PanoramaIcon />\n        <Typography className={classes.title}>Photos</Typography>\n      </div>\n      <div className={classes.content}>\n        {props.data.meta.images.map((image) => {\n          return (\n            <LazyImage\n              key={image}\n              src={image}\n              className={classes.imgWrapper}\n              imgClassName={classes.img}\n              onImgLoaded={(width, height) => {\n                setState((prev) => ({\n                  ...prev,\n                  imgWidths: {\n                    ...prev.imgWidths,\n                    [image]: (IMAGE_HEIGHT * width) / height,\n                  },\n                }));\n              }}\n              imgStyle={\n                state.imgWidths[image] ? { width: state.imgWidths[image] } : {}\n              }\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { Contract, Wallet, ethers } from \"ethers\";\nimport { Maybe } from \"types\";\nimport idoRefundAbi from \"abis/idoRefund.json\";\n\nclass IDORefundService {\n  provider: any;\n  contract: Contract;\n\n  constructor(provider: any, signerAddress: Maybe<string>, addr: string) {\n    this.provider = provider;\n    if (signerAddress) {\n      const signer: Wallet = provider.getSigner();\n      this.contract = new ethers.Contract(addr, idoRefundAbi, provider).connect(\n        signer\n      );\n    } else {\n      this.contract = new ethers.Contract(addr, idoRefundAbi, provider);\n    }\n  }\n\n  get address(): string {\n    return this.contract.address;\n  }\n\n  async refund() {\n    const transactionObject = await this.contract.refund();\n    console.log(`refund transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n}\n\nexport { IDORefundService };\n","import { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { getTokenFromAddress } from \"config/networks\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { BigNumber } from \"ethers\";\nimport { transparentize } from \"polished\";\nimport React, { useEffect, useState } from \"react\";\nimport { IToken } from \"types\";\nimport { formatBigNumber } from \"utils\";\nimport { ZERO } from \"utils/number\";\nimport { NULL_ADDRESS } from \"config/constants\";\nimport { useIsMountedRef, useServices } from \"helpers\";\nimport idoRefundAbi from \"abis/idoRefund.json\";\nimport { IDORefundService } from \"services/idoRefund\";\nimport { useSnackbar } from \"notistack\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: 24,\n    border: `1px solid ${transparentize(0.8, theme.colors.neutralLighter)}`,\n    backgroundImage: \"url(/assets/bg-1.png)\",\n    backgroundPosition: \"top\",\n\n    marginTop: 24,\n  },\n  header: { paddingBottom: 12 },\n  label: {\n    color: theme.colors.neutralLighter,\n    fontWeight: 500,\n    \"& span\": {\n      color: theme.colors.primary,\n    },\n    \"& + &\": {\n      marginTop: 8,\n    },\n  },\n  balanceLabel: {\n    color: theme.colors.gray2,\n    fontSize: 14,\n    marginTop: 8,\n  },\n  headerLabel: {\n    color: theme.colors.neutralLighter,\n    fontSize: 24,\n    fontWeight: 600,\n  },\n  footer: { paddingTop: 16 },\n  button: {\n    height: 40,\n\n    \"&:disabled\": {\n      backgroundColor: `${transparentize(0.4, theme.colors.gray2)} !important`,\n      \"& span\": {\n        color: `${transparentize(0.4, theme.colors.neutralLighter)} !important`,\n      },\n    },\n  },\n}));\n\ninterface IProps {\n  address: string;\n}\n\ninterface IState {\n  amount: BigNumber;\n  refunded: boolean;\n  fundToken: string;\n}\n\nexport const RefundSection = (props: IProps) => {\n  const { address } = props;\n  const classes = useStyles();\n  const {\n    account,\n    library: provider,\n    networkId,\n    setTxModalInfo,\n  } = useConnectedWeb3Context();\n  const [state, setState] = useState<IState>({\n    amount: ZERO,\n    refunded: false,\n    fundToken: NULL_ADDRESS,\n  });\n  const { multicall } = useServices();\n  const isMountedRef = useIsMountedRef();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const loadInfo = async () => {\n    if (!account || !provider) {\n      setState((prev) => ({\n        ...prev,\n        amount: ZERO,\n        refunded: false,\n        fundToken: NULL_ADDRESS,\n      }));\n      return;\n    }\n    try {\n      const infoPools = [\n        { name: \"fundToken\", address: address, params: [] },\n        { name: \"getTotalFunded\", address: address, params: [account] },\n        { name: \"refunded\", address: address, params: [account] },\n      ];\n      const [[fundToken], [totalFunded], [refunded]] =\n        await multicall.multicallv2(idoRefundAbi, infoPools, {\n          requireSuccess: false,\n        });\n      if (isMountedRef.current === true)\n        setState((prev) => ({\n          ...prev,\n          amount: totalFunded,\n          refunded,\n          fundToken,\n        }));\n    } catch (error) {\n      if (isMountedRef.current === true)\n        setState((prev) => ({\n          ...prev,\n          amount: ZERO,\n          refunded: false,\n          fundToken: NULL_ADDRESS,\n        }));\n    }\n  };\n\n  const onRefund = async () => {\n    if (!account || !provider) {\n      return;\n    }\n    try {\n      setTxModalInfo(true, \"Refunding...\");\n      const refundService = new IDORefundService(provider, account, address);\n      const txId = await refundService.refund();\n      setTxModalInfo(\n        true,\n        \"Refunding...\",\n        \"Please wait until tx is confirmed\",\n        txId\n      );\n      await provider.waitForTransaction(txId);\n      enqueueSnackbar(\"Your fund is refuned successfully\");\n      setTxModalInfo(true, \"Reloading...\");\n      await loadInfo();\n      setTxModalInfo(false);\n    } catch (error) {\n      setTxModalInfo(false);\n      enqueueSnackbar(error.message || \"Something went wrong!\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadInfo();\n  }, [account, props.address, networkId]);\n\n  // if (state.amount.isZero()) return null;\n  let fundToken: IToken;\n\n  try {\n    fundToken = getTokenFromAddress(state.fundToken, networkId);\n  } catch (error) {\n    return null;\n  }\n\n  const renderContent = () => {\n    return (\n      <>\n        <div>\n          <Typography className={classes.label}>\n            Funded Amount:{\" \"}\n            <span>\n              {formatBigNumber(state.amount, fundToken.decimals)}{\" \"}\n              {fundToken.symbol.toUpperCase()}\n            </span>\n          </Typography>\n          {state.refunded && (\n            <Typography className={classes.label}>Already refunded</Typography>\n          )}\n        </div>\n        <div className={classes.footer}>\n          <div>\n            <Button\n              className={classes.button}\n              color=\"primary\"\n              fullWidth\n              variant=\"contained\"\n              disabled={state.refunded || state.amount.isZero()}\n              onClick={onRefund}\n            >\n              Refund\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <Typography className={classes.headerLabel}>Refund</Typography>\n      </div>\n      {renderContent()}\n    </div>\n  );\n};\n","import { BigNumber, Contract, Wallet, ethers } from \"ethers\";\nimport { IFunder, Maybe } from \"types\";\nimport idoAbi from \"abis/idov4.json\";\n\nclass IDOv4Service {\n  provider: any;\n  contract: Contract;\n\n  constructor(provider: any, signerAddress: Maybe<string>, addr: string) {\n    this.provider = provider;\n    if (signerAddress) {\n      const signer: Wallet = provider.getSigner();\n      this.contract = new ethers.Contract(addr, idoAbi, provider).connect(\n        signer\n      );\n    } else {\n      this.contract = new ethers.Contract(addr, idoAbi, provider);\n    }\n  }\n\n  get address(): string {\n    return this.contract.address;\n  }\n\n  async getMaxAllocation(address: string) {\n    return this.contract.getMaxAllocation(address);\n  }\n\n  async getClaimableAmount(address: string) {\n    return this.contract.getClaimableAmount(address);\n  }\n\n  async isTierWhitelisted(address: string) {\n    return this.contract.isTierWhitelisted(address);\n  }\n\n  async whitelistEnabled() {\n    return this.contract.whitelistEnabled();\n  }\n\n  async getFunderInfo(address: string): Promise<IFunder> {\n    const funder = await this.contract.getFunderInfo(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[1],\n    };\n  }\n\n  async tierFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.tierFunders(address);\n    return {\n      totalFunded: funder[0],\n\n      release: funder[1],\n    };\n  }\n\n  async whitelistFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.whitelistFunders(address);\n    return {\n      totalFunded: funder[0],\n\n      release: funder[1],\n    };\n  }\n\n  async fcfsFunders(address: string): Promise<IFunder> {\n    const funder = await this.contract.fcfsFunders(address);\n    return {\n      totalFunded: funder[0],\n      release: funder[1],\n    };\n  }\n\n  async getRoundTotalAllocation(roundId: BigNumber) {\n    return this.contract.getRoundTotalAllocation(roundId);\n  }\n\n  async getCurrentRoundId() {\n    return this.contract.getCurrentRoundId();\n  }\n\n  async buyWithBNB(\n    amount: BigNumber,\n    gasPrice: BigNumber,\n    gasLimit: BigNumber\n  ) {\n    const transactionObject = await this.contract.buyWithBNB({\n      value: amount,\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`buyWithBNB transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async buy(amount: BigNumber, gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.buy(amount, {\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`buy transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n\n  async estimateGas(func: string, args: any[], value?: BigNumber) {\n    return this.contract.estimateGas[func](...args, { value: value || \"0x0\" });\n  }\n\n  async claim(gasPrice: BigNumber, gasLimit: BigNumber) {\n    const transactionObject = await this.contract.claim({\n      gasPrice,\n      gasLimit,\n    });\n    console.log(`Claim transaction hash: ${transactionObject.hash}`);\n    return transactionObject.hash;\n  }\n}\n\nexport { IDOv4Service };\n","import { Grid, makeStyles, Button, Box } from \"@material-ui/core\";\nimport { useSnackbar } from \"notistack\";\nimport { useEffect, useState } from \"react\";\nimport {\n  ActionSection,\n  GallerySection,\n  OverviewSection,\n  RefundSection,\n  StatusSection,\n} from \"./components\";\nimport { BigNumber } from \"ethers\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { ZERO } from \"utils/number\";\nimport { IIDODetails, IMetadata } from \"types\";\nimport { useIsMountedRef } from \"helpers\";\nimport { IDOService } from \"services/ido\";\nimport { IDOv2Service } from \"services/idov2\";\nimport { DefaultReadonlyProvider, getTierFactor } from \"config/networks\";\nimport { ERC20Service } from \"services/erc20\";\nimport { NULL_ADDRESS, REFUND_CONTRACTS } from \"config/constants\";\nimport { calculateGasMargin } from \"utils\";\nimport { IDOv3Service } from \"services/idov3\";\nimport { TierService } from \"services/tier\";\nimport { IDOv4Service } from \"services/idov4\";\nimport { IDOVersion } from \"utils/enums\";\nimport { IDOSecService } from \"services/idoSec\";\nimport { useHistory } from \"react-router-dom\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\n\nconst useStyles = makeStyles((theme) => ({\n  content: { padding: \"32px 16px\" },\n  mainContainer: {\n    marginTop: 16,\n    marginBottom: 16,\n  },\n}));\n\ninterface IState {\n  personalTotalFund: BigNumber;\n  personalReleased: BigNumber;\n  currentRound: BigNumber;\n  roundsTotalAllocation: { [key: string]: BigNumber };\n  personalRoundMaxAllocation: BigNumber;\n  personalRoundFunded: BigNumber;\n  personalReleasableAmount: BigNumber;\n  tierWhitelisted: boolean;\n  whitelistEnabled: boolean;\n  tierId: number;\n}\n\ninterface IProps {\n  data: IIDODetails & { meta: IMetadata };\n  onReloadIDO: () => Promise<void>;\n}\n\nexport const IDODetailsContent = (props: IProps) => {\n  const {\n    account,\n    library: provider,\n    networkId,\n    setTxModalInfo,\n    setWalletConnectModalOpened,\n  } = useConnectedWeb3Context();\n  const [state, setState] = useState<IState>({\n    personalTotalFund: ZERO,\n    personalReleased: ZERO,\n    personalRoundMaxAllocation: ZERO,\n    personalRoundFunded: ZERO,\n    currentRound: ZERO,\n    roundsTotalAllocation: {},\n    personalReleasableAmount: ZERO,\n    tierWhitelisted: false,\n    whitelistEnabled: true,\n    tierId: 0,\n  });\n  const isMountedRef = useIsMountedRef();\n  const classes = useStyles();\n  const { data } = props;\n  const { enqueueSnackbar } = useSnackbar();\n  let history = useHistory();\n  const handleClick = () => history.push(\"/idos\");\n  const refundContract = REFUND_CONTRACTS[data.address.toLowerCase()] || \"\";\n\n  const loadPublicInfo = async () => {\n    if (data.version === IDOVersion.v1) {\n      return;\n    }\n    if (data.version === IDOVersion.v2) {\n      try {\n        const ido = new IDOv2Service(\n          provider || DefaultReadonlyProvider,\n          account,\n          data.address\n        );\n        const rounds = [1, 2, 3, 4, 5, 6];\n        const currentRound = await ido.getCurrentRoundId();\n        const roundsMaxAllocations = await Promise.all(\n          rounds.map((roundId) =>\n            ido.getRoundTotalAllocation(BigNumber.from(roundId))\n          )\n        );\n        if (isMountedRef.current === true) {\n          const roundsTotalAllocation: { [key: string]: BigNumber } = {};\n          rounds.forEach((round, index) => {\n            roundsTotalAllocation[round] = roundsMaxAllocations[index];\n          });\n          setState((prev) => ({\n            ...prev,\n            roundsTotalAllocation,\n            currentRound,\n          }));\n        }\n      } catch (error) {\n        if (isMountedRef.current === true) {\n          setState((prev) => ({\n            ...prev,\n            roundsTotalAllocation: {},\n            currentRound: ZERO,\n          }));\n        }\n      }\n    } else if (data.version === IDOVersion.sec) {\n      const ido = new IDOSecService(\n        provider || DefaultReadonlyProvider,\n        account,\n        data.address\n      );\n      const rounds = [1, 2];\n      const currentRound = await ido.getCurrentRoundId();\n      const roundsMaxAllocations = await Promise.all(\n        rounds.map((roundId) =>\n          ido.getRoundTotalAllocation(BigNumber.from(roundId))\n        )\n      );\n      if (isMountedRef.current === true) {\n        const roundsTotalAllocation: { [key: string]: BigNumber } = {};\n        rounds.forEach((round, index) => {\n          roundsTotalAllocation[round] = roundsMaxAllocations[index];\n        });\n        setState((prev) => ({\n          ...prev,\n          roundsTotalAllocation,\n          currentRound,\n          whitelistEnabled: true,\n        }));\n      }\n    } else {\n      try {\n        const ido = new IDOv3Service(\n          provider || DefaultReadonlyProvider,\n          account,\n          data.address\n        );\n        const rounds = [1, 2, 3, 4, 5, 6];\n        const currentRound = await ido.getCurrentRoundId();\n        const roundsMaxAllocations = await Promise.all(\n          rounds.map((roundId) =>\n            ido.getRoundTotalAllocation(BigNumber.from(roundId))\n          )\n        );\n        const whitelistEnabled = await ido.whitelistEnabled();\n        if (isMountedRef.current === true) {\n          const roundsTotalAllocation: { [key: string]: BigNumber } = {};\n          rounds.forEach((round, index) => {\n            roundsTotalAllocation[round] = roundsMaxAllocations[index];\n          });\n          setState((prev) => ({\n            ...prev,\n            roundsTotalAllocation,\n            currentRound,\n            whitelistEnabled,\n          }));\n        }\n      } catch (error) {\n        if (isMountedRef.current === true) {\n          setState((prev) => ({\n            ...prev,\n            roundsTotalAllocation: {},\n            currentRound: ZERO,\n            whitelistEnabled: true,\n          }));\n        }\n      }\n    }\n  };\n\n  const loadPersonalRoundInfo = async () => {\n    if (\n      state.currentRound.isZero() ||\n      !account ||\n      !provider ||\n      data.version === IDOVersion.v1\n    ) {\n      setState((prev) => ({\n        ...prev,\n        personalRoundFunded: ZERO,\n        personalRoundMaxAllocation: ZERO,\n      }));\n      return;\n    }\n\n    try {\n      if (data.version === IDOVersion.sec) {\n        const ido = new IDOSecService(provider, account, data.address);\n        const personalRoundMaxAllocation = await ido.getMaxAllocation(account);\n\n        let personalRoundFunded = ZERO;\n        if (state.currentRound.toNumber() === 1) {\n          personalRoundFunded = (await ido.whitelistFunders(account))\n            .totalFunded;\n        } else if (state.currentRound.toNumber() === 2) {\n          personalRoundFunded = (await ido.fcfsFunders(account)).totalFunded;\n        }\n\n        if (isMountedRef.current === true) {\n          setState((prev) => ({\n            ...prev,\n            personalRoundFunded,\n            personalRoundMaxAllocation,\n          }));\n        }\n        return;\n      }\n      const ido =\n        data.version === IDOVersion.v2\n          ? new IDOv2Service(provider, account, data.address)\n          : new IDOv3Service(provider, account, data.address);\n      const personalRoundMaxAllocation = await ido.getMaxAllocation(account);\n\n      let personalRoundFunded = ZERO;\n      if (state.currentRound.toNumber() < 5) {\n        personalRoundFunded = (await ido.tierFunders(account)).totalFunded;\n      } else if (state.currentRound.toNumber() === 5) {\n        personalRoundFunded = (await ido.whitelistFunders(account)).totalFunded;\n      } else if (state.currentRound.toNumber() === 6) {\n        personalRoundFunded = (await ido.fcfsFunders(account)).totalFunded;\n      }\n\n      if (isMountedRef.current === true) {\n        setState((prev) => ({\n          ...prev,\n          personalRoundFunded,\n          personalRoundMaxAllocation,\n        }));\n      }\n    } catch (error) {\n      console.error(error);\n      if (isMountedRef.current === true) {\n        setState((prev) => ({\n          ...prev,\n          personalRoundFunded: ZERO,\n          personalRoundMaxAllocation: ZERO,\n        }));\n      }\n    }\n  };\n\n  const loadPersonalInfo = async () => {\n    if (!account || !provider) {\n      setState((prev) => ({\n        ...prev,\n        personalTotalFund: ZERO,\n        personalReleased: ZERO,\n        personalRoundMaxAllocation: ZERO,\n        personalRoundFunded: ZERO,\n        personalReleasableAmount: ZERO,\n      }));\n      return;\n    }\n    try {\n      if (data.version === IDOVersion.v1) {\n        const ido = new IDOService(provider, account, data.address);\n        const [funder, releasable] = await Promise.all([\n          ido.getFunderInfo(account),\n          ido.getClaimableAmount(account),\n        ]);\n\n        if (isMountedRef.current === true)\n          setState((prev) => ({\n            ...prev,\n            personalTotalFund: funder.totalFunded,\n            personalReleased: funder.release,\n            personalReleasableAmount: releasable,\n          }));\n      } else if (data.version === IDOVersion.v2) {\n        const ido = new IDOv2Service(provider, account, data.address);\n        const funder = await ido.getFunderInfo(account);\n        const releasable = await ido.getClaimableAmount(account);\n        if (isMountedRef.current === true)\n          setState((prev) => ({\n            ...prev,\n            personalTotalFund: funder.totalFunded,\n            personalReleased: funder.release,\n            personalReleasableAmount: releasable,\n          }));\n      } else if (data.version === IDOVersion.sec) {\n        const ido = new IDOSecService(provider, account, data.address);\n        const funder = await ido.getFunderInfo(account);\n        const releasable = await ido.getClaimableAmount(account);\n\n        if (isMountedRef.current === true)\n          setState((prev) => ({\n            ...prev,\n            personalTotalFund: funder.totalFunded,\n            personalReleased: funder.release,\n            personalReleasableAmount: releasable,\n          }));\n      } else {\n        // v3, v4\n        const ido = new IDOv3Service(provider, account, data.address);\n        const funder = await ido.getFunderInfo(account);\n        const releasable = await ido.getClaimableAmount(account);\n        const tierWhitelisted = await ido.isTierWhitelisted(account);\n\n        const tier = new TierService(\n          provider,\n          account,\n          getTierFactor(networkId).tier\n        );\n        const tierId = await tier.getTierId(account);\n\n        if (isMountedRef.current === true)\n          setState((prev) => ({\n            ...prev,\n            personalTotalFund: funder.totalFunded,\n            personalReleased: funder.release,\n            personalReleasableAmount: releasable,\n            tierWhitelisted,\n            tierId,\n          }));\n      }\n    } catch (error) {\n      if (isMountedRef.current === true)\n        setState((prev) => ({\n          ...prev,\n          personalTotalFund: ZERO,\n          personalReleased: ZERO,\n          personalReleasableAmount: ZERO,\n          tierWhitelisted: false,\n        }));\n    }\n  };\n\n  useEffect(() => {\n    loadPublicInfo();\n    const interval = setInterval(loadPublicInfo, 60000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [data.address]);\n\n  useEffect(() => {\n    loadPersonalInfo();\n    const interval = setInterval(loadPersonalInfo, 60000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [data.address, account]);\n\n  useEffect(() => {\n    loadPersonalRoundInfo();\n    const interval = setInterval(loadPersonalRoundInfo, 60000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [data.address, account, state.currentRound._hex]);\n\n  const onBuy = async (amount: BigNumber) => {\n    if (!account || !provider) {\n      setWalletConnectModalOpened(true);\n      return;\n    }\n    try {\n      if (data.fundToken !== NULL_ADDRESS) {\n        const fundToken = new ERC20Service(provider, account, data.fundToken);\n        setTxModalInfo(true, \"Checking allowance...\");\n        const hasEnoughAllowance = await fundToken.hasEnoughAllowance(\n          account,\n          data.address,\n          amount\n        );\n\n        if (!hasEnoughAllowance) {\n          setTxModalInfo(true, \"Approving...\");\n          const tx = await fundToken.approveUnlimited(data.address);\n          setTxModalInfo(\n            true,\n            \"Approving...\",\n            \"Please wait until tx is confirmed\",\n            tx\n          );\n          await provider.waitForTransaction(tx);\n        }\n      }\n\n      const ido = new IDOv4Service(provider, account, data.address);\n      setTxModalInfo(true, \"Buying...\");\n      const gasPrice = await provider.getGasPrice();\n\n      if (data.fundToken === NULL_ADDRESS) {\n        let estimatedGas = BigNumber.from(\"350000\");\n\n        const tx = await ido.buyWithBNB(\n          amount,\n          gasPrice,\n          calculateGasMargin(estimatedGas)\n        );\n        setTxModalInfo(\n          true,\n          \"Buying...\",\n          \"Please wait until tx is confirmed\",\n          tx\n        );\n        await provider.waitForTransaction(tx);\n      } else {\n        let estimatedGas = BigNumber.from(\"380000\");\n\n        const tx = await ido.buy(\n          amount,\n          gasPrice,\n          calculateGasMargin(estimatedGas)\n        );\n        setTxModalInfo(\n          true,\n          \"Buying...\",\n          \"Please wait until tx is confirmed\",\n          tx\n        );\n        const response = await provider.waitForTransaction(tx);\n        if (response.status === 0) {\n          enqueueSnackbar(\"Failed to buy\");\n        } else {\n          enqueueSnackbar(\"You've bought successfully\");\n        }\n      }\n\n      setTxModalInfo(true, \"Reloading ...\");\n      await props.onReloadIDO();\n      await loadPublicInfo();\n      await loadPersonalInfo();\n      await loadPersonalRoundInfo();\n\n      setTxModalInfo(false);\n    } catch (error: any) {\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n      setTxModalInfo(false);\n    }\n  };\n\n  const onClaim = async () => {\n    if (!account || !provider) {\n      setWalletConnectModalOpened(true);\n      return;\n    }\n    try {\n      setTxModalInfo(true, \"Claiming ...\");\n      const gasPrice = await provider.getGasPrice();\n\n      if (data.version === IDOVersion.v1) {\n        const ido = new IDOService(provider, account, data.address);\n        const estimatedGas = await ido.claimEstimateGas();\n        const tx = await ido.claim(gasPrice, calculateGasMargin(estimatedGas));\n        setTxModalInfo(\n          true,\n          \"Claiming...\",\n          \"Please wait until tx is confirmed\",\n          tx\n        );\n        await provider.waitForTransaction(tx);\n      } else if (data.version === IDOVersion.v2) {\n        const ido = new IDOv2Service(provider, account, data.address);\n\n        let estimatedGas = BigNumber.from(\"300000\");\n        const tx = await ido.claim(gasPrice, calculateGasMargin(estimatedGas));\n        setTxModalInfo(\n          true,\n          \"Claiming...\",\n          \"Please wait until tx is confirmed\",\n          tx\n        );\n        await provider.waitForTransaction(tx);\n      } else if (data.version === IDOVersion.sec) {\n        const ido = new IDOv3Service(provider, account, data.address);\n\n        let estimatedGas = BigNumber.from(\"300000\");\n        try {\n          estimatedGas = await ido.estimateGas(\"claim\", []);\n        } catch (error) {}\n        const tx = await ido.claim(gasPrice, calculateGasMargin(estimatedGas));\n        setTxModalInfo(\n          true,\n          \"Claiming...\",\n          \"Please wait until tx is confirmed\",\n          tx\n        );\n        await provider.waitForTransaction(tx);\n      } else {\n        // v3, v4\n        const ido = new IDOv3Service(provider, account, data.address);\n\n        let estimatedGas = BigNumber.from(\"300000\");\n        try {\n          estimatedGas = await ido.estimateGas(\"claim\", []);\n        } catch (error) {}\n        const tx = await ido.claim(gasPrice, calculateGasMargin(estimatedGas));\n        setTxModalInfo(\n          true,\n          \"Claiming...\",\n          \"Please wait until tx is confirmed\",\n          tx\n        );\n        await provider.waitForTransaction(tx);\n      }\n      enqueueSnackbar(\"Claimed successfully\");\n      await loadPersonalInfo();\n      setTxModalInfo(false);\n    } catch (error: any) {\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n      setTxModalInfo(false);\n    }\n  };\n  return (\n    <div className={classes.content}>\n      <Button color=\"primary\" onClick={handleClick} variant=\"text\">\n        <ChevronLeftIcon fontSize=\"small\" />\n        Go back\n      </Button>\n      <Grid container spacing={2} className={classes.mainContainer}>\n        <Grid item xs={12}>\n          <OverviewSection data={data as any} />\n        </Grid>\n      </Grid>\n      <Grid container spacing={2} className={classes.mainContainer}>\n        <Grid item xs={12} md={5}>\n          <ActionSection\n            data={data as any}\n            onBuy={onBuy}\n            onClaim={onClaim}\n            {...state}\n          />\n          {refundContract !== \"\" && <RefundSection address={refundContract} />}\n        </Grid>\n        <Grid item sm={12} md={7}>\n          <StatusSection data={data as any} {...state} />\n        </Grid>\n      </Grid>\n      <Grid container spacing={2} className={classes.mainContainer}>\n        {data.meta.images && data.meta.images.length > 0 && (\n          <Grid item sm={12}>\n            <GallerySection data={data as any} />\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n","import { Grid, makeStyles } from \"@material-ui/core\";\nimport { PageWrapper, SimpleLoader } from \"components\";\nimport { IDOS_TO_HIDE } from \"config/constants\";\nimport { useIDO } from \"helpers\";\nimport { useSnackbar } from \"notistack\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { isAddress } from \"utils/tools\";\nimport { IDODetailsContent } from \"./IDODetailsContent\";\n\nconst useStyles = makeStyles((theme) => ({\n  content: { paddingBottom: 32, paddingTop: 32 },\n}));\n\nconst IDODetailsPage = () => {\n  const params = useParams();\n  const history = useHistory();\n  const id = (params as any).id;\n  const { enqueueSnackbar } = useSnackbar();\n  const { data, loading, load } = useIDO(id);\n\n  useEffect(() => {\n    if (\n      !id ||\n      !isAddress(id) ||\n      IDOS_TO_HIDE.includes((id || \"\").toLowerCase())\n    ) {\n      enqueueSnackbar(\"Invalid pad\", { variant: \"error\" });\n      history.push(\"/idos\");\n    }\n  }, [id]);\n\n  useEffect(() => {\n    if (!loading && !data) {\n      history.push(\"/idos\");\n    }\n  }, [loading, data]);\n\n  const renderContent = () => {\n    if (!data || !data.meta) return null;\n    return <IDODetailsContent data={data as any} onReloadIDO={load} />;\n  };\n\n  return (\n    <PageWrapper>\n      {!data || !data.meta ? <SimpleLoader /> : renderContent()}\n    </PageWrapper>\n  );\n};\n\nexport default IDODetailsPage;\n"],"sourceRoot":""}