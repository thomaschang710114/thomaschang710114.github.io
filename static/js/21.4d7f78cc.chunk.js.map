{"version":3,"sources":["services/apiService.ts","pages/SolLinkPage/index.tsx"],"names":["ApiService","message","signature","a","axios","post","SOL_BSC_BACKEND_SERVER","response","data","address","get","sol","useStyles","makeStyles","theme","content","backgroundColor","colors","neutralLighter","padding","marginTop","input","button","margin","SolLinkPage","classes","useState","state","setState","useConnectedWeb3Context","account","provider","library","apiService","enqueueSnackbar","useSnackbar","loadSolAddress","getLinkedSolAddress","prevSol","prev","useEffect","onLink","getSigner","signMessage","postSolAddress","variant","console","error","Typography","align","component","Grid","container","style","justifyContent","item","sm","md","className","TextField","color","fullWidth","label","value","onChange","event","target","Button","disabled","onClick"],"mappings":"4RAGaA,EAAb,qIACE,WAAqBC,EAAcC,GAAnC,eAAAC,EAAA,sEACyBC,IAAMC,KAAN,UAAcC,IAAd,YAAgD,CACrEL,UACAC,cAHJ,cACQK,EADR,yBAKSA,EAASC,MALlB,2CADF,iIASE,WAA0BC,GAA1B,eAAAN,EAAA,sEACyBC,IAAMM,IAAN,UAClBJ,IADkB,0BACsBG,IAF/C,cACQF,EADR,yBAISA,EAASC,KAAKG,KAJvB,2CATF,8D,OCWMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,QAAS,CACPC,gBAAiBF,EAAMG,OAAOC,eAC9BC,QAAS,GACTC,UAAW,IAEbC,MAAO,GACPC,OAAQ,CACNC,OAAQ,iBAmFGC,UA3EK,WAClB,IAAMC,EAAUb,IAChB,EAA0Bc,mBAAiB,CACzCf,IAAK,KADP,mBAAOgB,EAAP,KAAcC,EAAd,KAGA,EAAuCC,cAA/BC,EAAR,EAAQA,QAAkBC,EAA1B,EAAiBC,QACXC,EAAa,IAAIjC,EACfkC,EAAoBC,cAApBD,gBAEFE,EAAc,uCAAG,4BAAAjC,EAAA,yDAChB2B,EADgB,0EAKGG,EAAWI,oBAAoBP,GALlC,OAKbQ,EALa,OAMnBV,GAAS,SAACW,GAAD,mBAAC,eAAeA,GAAhB,IAAsB5B,IAAK2B,OANjB,yGAAH,qDAUpBE,qBAAU,WACRJ,MACC,CAACN,EAASC,IAEb,IAAMU,EAAM,uCAAG,4BAAAtC,EAAA,yDACR2B,GAAYC,EADJ,0EAKaA,EAASW,YAAYC,YAAYhB,EAAMhB,KALpD,cAKLT,EALK,gBAML+B,EAAWW,eAAejB,EAAMhB,IAAKT,GANhC,OAOXgC,EAAgB,4CAPL,kDASXA,EAAgB,KAAMjC,SAAW,uBAAwB,CACvD4C,QAAS,UAEXC,QAAQC,MAAR,MAZW,0DAAH,qDAgBZ,OACE,eAAC,IAAD,WACE,cAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,UAAU,KAAKL,QAAQ,KAAlD,sBAGA,cAACM,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAAEC,eAAgB,UAAzC,SACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,sBAAKC,UAAWjC,EAAQV,QAAxB,UACE,cAAC4C,EAAA,EAAD,CACEC,MAAM,UACNF,UAAWjC,EAAQJ,MACnBwC,WAAS,EACTC,MAAM,wBACNjB,QAAQ,WACRkB,MAAOpC,EAAMhB,IACbqD,SAAU,SAACC,GACTrC,GAAS,SAACW,GAAD,mBAAC,eAAeA,GAAhB,IAAsB5B,IAAKsD,EAAMC,OAAOH,cAGrD,cAACI,EAAA,EAAD,CACEP,MAAM,UACNC,WAAS,EACThB,QAAQ,YACRuB,UAAWzC,EAAMhB,IACjB0D,QAAS5B,EACTiB,UAAWjC,EAAQH,OANrB","file":"static/js/21.4d7f78cc.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { SOL_BSC_BACKEND_SERVER } from \"config/constants\";\n\nexport class ApiService {\n  async postSolAddress(message: any, signature: any) {\n    const response = await axios.post(`${SOL_BSC_BACKEND_SERVER}bsc/link`, {\n      message,\n      signature,\n    });\n    return response.data;\n  }\n\n  async getLinkedSolAddress(address: string) {\n    const response = await axios.get(\n      `${SOL_BSC_BACKEND_SERVER}bsc/linked-sol/${address}`\n    );\n    return response.data.sol;\n  }\n}\n","import {\n  Button,\n  makeStyles,\n  TextField,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport { PageWrapper } from \"components\";\nimport { useConnectedWeb3Context } from \"contexts\";\nimport { useSnackbar } from \"notistack\";\nimport { transparentize } from \"polished\";\nimport { useState, useEffect } from \"react\";\nimport { ApiService } from \"services/apiService\";\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    backgroundColor: theme.colors.neutralLighter,\n    padding: 16,\n    marginTop: 16,\n  },\n  input: {},\n  button: {\n    margin: \"12px auto\",\n  },\n}));\n\ninterface IState {\n  sol: string;\n}\n\nconst SolLinkPage = () => {\n  const classes = useStyles();\n  const [state, setState] = useState<IState>({\n    sol: \"\",\n  });\n  const { account, library: provider } = useConnectedWeb3Context();\n  const apiService = new ApiService();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const loadSolAddress = async () => {\n    if (!account) {\n      return;\n    }\n    try {\n      const prevSol = await apiService.getLinkedSolAddress(account);\n      setState((prev) => ({ ...prev, sol: prevSol }));\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    loadSolAddress();\n  }, [account, provider]);\n\n  const onLink = async () => {\n    if (!account || !provider) {\n      return;\n    }\n    try {\n      const signature = await provider.getSigner().signMessage(state.sol);\n      await apiService.postSolAddress(state.sol, signature);\n      enqueueSnackbar(\"You linked you SOL address successfully!\");\n    } catch (error) {\n      enqueueSnackbar(error.message || \"Something went wrong\", {\n        variant: \"error\",\n      });\n      console.error(error);\n    }\n  };\n\n  return (\n    <PageWrapper>\n      <Typography align=\"center\" component=\"h3\" variant=\"h1\">\n        Link Sol\n      </Typography>\n      <Grid container style={{ justifyContent: \"center\" }}>\n        <Grid item sm={12} md={8}>\n          <div className={classes.content}>\n            <TextField\n              color=\"primary\"\n              className={classes.input}\n              fullWidth\n              label=\"Solana Wallet Address\"\n              variant=\"outlined\"\n              value={state.sol}\n              onChange={(event) => {\n                setState((prev) => ({ ...prev, sol: event.target.value }));\n              }}\n            ></TextField>\n            <Button\n              color=\"primary\"\n              fullWidth\n              variant=\"contained\"\n              disabled={!state.sol}\n              onClick={onLink}\n              className={classes.button}\n            >\n              Link\n            </Button>\n          </div>\n        </Grid>\n      </Grid>\n    </PageWrapper>\n  );\n};\n\nexport default SolLinkPage;\n"],"sourceRoot":""}